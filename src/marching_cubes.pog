
struct MarCubesChunk {
    float32* data;
    uint32 size;

    Mesh mesh;
    DrawBuffers db;
}

// i = x + y*s + z*s*s

uint32 get_index(uint32 s, ivec3 i) return get_index(s, i.x, i.y, i.z);
uint32 get_index(uint32 s, int32 x, y, z) return x + y*s + z*s*s;
ivec3 get_xyz(uint32 s, int32 i) {
    ivec3 ret = {};
    ret.x = i % s;
    ret.y = (i / s) % s;
    ret.z = i / (s*s);
    return ret;
}

MarCubesChunk init_mar_cubes_chunk(uint32 size) {
    MarCubesChunk chunk = {};
    chunk.size = size;
    chunk.data = calloc(size*size*size * sizeof float32, 1);
    chunk.mesh = mesh_create();
    return chunk;
}

void debug_draw_grid(MarCubesChunk* chunk) {
    uint32 s = chunk.size;
    for z:0..s for y:0..s for x:0..s {
        float32 value = chunk.data[get_index(s, x, y, z)];
        if value != 0.0 gizmo_point(make_vec(x, y, z), rgb(value), 0.1 + value/10);
    }
}

void add_tris(MarCubesChunk* chunk, int16[16] inds) {
    // for uint32 i = 0, i < 16, i += 3 {
        
    // }
}

void march_cubes(MarCubesChunk* chunk) {

    uint32 s = chunk.size - 1;
    for z:0..s for y:0..s for x:0..s {
        uint32[8] inds = {};
        inds[0] = get_index(chunk.size, x,   y,   z);
        inds[1] = get_index(chunk.size, x+1, y,   z);
        inds[2] = get_index(chunk.size, x+1, y,   z+1);
        inds[3] = get_index(chunk.size, x,   y,   z+1);
        inds[4] = get_index(chunk.size, x,   y+1, z);
        inds[5] = get_index(chunk.size, x+1, y+1, z);
        inds[6] = get_index(chunk.size, x+1, y+1, z+1);
        inds[7] = get_index(chunk.size, x,   y+1, z+1);

        uint8 cube_index = 0;
        for 0 .. 8  if chunk.data[inds[it]] != 0.0  cube_index |= 1 << it;

        vec3[] positions = {
            {0.5, 0, 0},
            {1,   0, 0.5},
            {0.5, 0, 1},
            {0,   0, 0.5},
            {0.5, 1, 0},
            {1,   1, 0.5},
            {0.5, 1, 1},
            {0,   1, 0.5},
            {0, 0.5, 0},
            {1, 0.5, 0},
            {1, 0.5, 1},
            {0, 0.5, 1}
        };

        vec3 center = make_vec(x, y, z);
        uint32 i = 0;
        while true {
            int16 ind0 = triTable[cube_index][i+0];
            int16 ind1 = triTable[cube_index][i+1];
            int16 ind2 = triTable[cube_index][i+2];
            i += 3;
            if ind0 == -1 break;
            vec3 v0 = center + positions[ind0];
            vec3 v1 = center + positions[ind1];
            vec3 v2 = center + positions[ind2];
            add_tri(*chunk.mesh, v0, v1, v2);
        }
    }

    gen_normals(chunk.mesh);
}


int16[16][256] triTable = {
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},
    {3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1},
    {3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1},
    {3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},
    {9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1},
    {1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},
    {9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
    {2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},
    {8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1},
    {9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
    {4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},
    {3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},
    {1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},
    {4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1},
    {4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1},
    {9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},
    {1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
    {5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1},
    {2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1},
    {9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
    {0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
    {2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1},
    {10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1},
    {4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1},
    {5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},
    {5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},
    {9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1},
    {0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1},
    {1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},
    {10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},
    {8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1},
    {2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1},
    {7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1},
    {9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},
    {2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},
    {11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1},
    {9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1},
    {5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1},
    {11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},
    {11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
    {1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},
    {9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1},
    {5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1},
    {2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
    {0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
    {5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},
    {6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},
    {0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},
    {3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1},
    {6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1},
    {5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},
    {1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
    {10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1},
    {6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1},
    {1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},
    {8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},
    {7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1},
    {3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
    {5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1},
    {0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1},
    {9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},
    {8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1},
    {5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1},
    {0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},
    {6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},
    {10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1},
    {10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1},
    {8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1},
    {1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1},
    {3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},
    {0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1},
    {10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1},
    {0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},
    {3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},
    {6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},
    {9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1},
    {8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1},
    {3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1},
    {6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
    {0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1},
    {10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1},
    {10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1},
    {1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},
    {2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},
    {7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1},
    {7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1},
    {2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},
    {1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},
    {11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1},
    {8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1},
    {0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},
    {7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
    {10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
    {2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
    {6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},
    {7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1},
    {2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1},
    {1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},
    {10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1},
    {10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1},
    {0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1},
    {7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1},
    {6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},
    {8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},
    {9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1},
    {6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1},
    {1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1},
    {4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1},
    {10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},
    {8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1},
    {0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1},
    {1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},
    {8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},
    {10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},
    {4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1},
    {10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
    {5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
    {11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},
    {9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
    {6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1},
    {7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},
    {3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},
    {7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1},
    {9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1},
    {3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1},
    {6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},
    {9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},
    {1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1},
    {4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1},
    {7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},
    {6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},
    {3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},
    {0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1},
    {6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1},
    {1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1},
    {0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},
    {11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},
    {6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1},
    {5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1},
    {9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},
    {1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},
    {1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1},
    {10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1},
    {0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},
    {5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1},
    {10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1},
    {11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1},
    {0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},
    {9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},
    {7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1},
    {2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1},
    {8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1},
    {9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},
    {9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},
    {1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1},
    {9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1},
    {9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},
    {5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},
    {0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1},
    {10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1},
    {2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},
    {0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},
    {0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},
    {9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1},
    {5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},
    {3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},
    {5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1},
    {8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1},
    {0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},
    {9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
    {0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1},
    {1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1},
    {3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1},
    {4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},
    {9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},
    {11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1},
    {11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1},
    {2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1},
    {9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},
    {3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},
    {1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1},
    {4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1},
    {4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},
    {0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
    {3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1},
    {3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},
    {0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},
    {9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1},
    {1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
};


    // switch (mask) {
    //     case 0: break;
    //     case 1:   add_tris(0, 8, 3); break;
    //     case 2:   add_tris(0, 1, 9); break;
    //     case 3:   add_tris(1, 8, 3, 9, 8, 1); break;
    //     case 4:   add_tris(1, 2, 10); break;
    //     case 5:   add_tris(0, 8, 3, 1, 2, 10); break;
    //     case 6:   add_tris(9, 2, 10, 0, 2, 9); break;
    //     case 7:   add_tris(2, 8, 3, 2, 10, 8, 10, 9, 8); break;
    //     case 8:   add_tris(3, 11, 2); break;
    //     case 9:   add_tris(0, 11, 2, 8, 11, 0); break;
    //     case 10:  add_tris(1, 9, 0, 2, 3, 11); break;
    //     case 11:  add_tris(1, 11, 2, 1, 9, 11, 9, 8, 11); break;
    //     case 12:  add_tris(3, 10, 1, 11, 10, 3); break;
    //     case 13:  add_tris(0, 10, 1, 0, 8, 10, 8, 11, 10); break;
    //     case 14:  add_tris(3, 9, 0, 3, 11, 9, 11, 10, 9); break;
    //     case 15:  add_tris(9, 8, 10, 10, 8, 11); break;
    //     case 16:  add_tris(4, 7, 8); break;
    //     case 17:  add_tris(4, 3, 0, 7, 3, 4); break;
    //     case 18:  add_tris(0, 1, 9, 8, 4, 7); break;
    //     case 19:  add_tris(4, 1, 9, 4, 7, 1, 7, 3, 1); break;
    //     case 20:  add_tris(1, 2, 10, 8, 4, 7); break;
    //     case 21:  add_tris(3, 4, 7, 3, 0, 4, 1, 2, 10); break;
    //     case 22:  add_tris(9, 2, 10, 9, 0, 2, 8, 4, 7); break;
    //     case 23:  add_tris(2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4); break;
    //     case 24:  add_tris(8, 4, 7, 3, 11, 2); break;
    //     case 25:  add_tris(11, 4, 7, 11, 2, 4, 2, 0, 4); break;
    //     case 26:  add_tris(9, 0, 1, 8, 4, 7, 2, 3, 11); break;
    //     case 27:  add_tris(4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1); break;
    //     case 28:  add_tris(3, 10, 1, 3, 11, 10, 7, 8, 4); break;
    //     case 29:  add_tris(1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4); break;
    //     case 30:  add_tris(4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3); break;
    //     case 31:  add_tris(4, 7, 11, 4, 11, 9, 9, 11, 10); break;
    //     case 32:  add_tris(9, 5, 4); break;
    //     case 33:  add_tris(9, 5, 4, 0, 8, 3); break;
    //     case 34:  add_tris(0, 5, 4, 1, 5, 0); break;
    //     case 35:  add_tris(8, 5, 4, 8, 3, 5, 3, 1, 5); break;
    //     case 36:  add_tris(1, 2, 10, 9, 5, 4); break;
    //     case 37:  add_tris(3, 0, 8, 1, 2, 10, 4, 9, 5); break;
    //     case 38:  add_tris(5, 2, 10, 5, 4, 2, 4, 0, 2); break;
    //     case 39:  add_tris(2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8); break;
    //     case 40:  add_tris(9, 5, 4, 2, 3, 11); break;
    //     case 41:  add_tris(0, 11, 2, 0, 8, 11, 4, 9, 5); break;
    //     case 42:  add_tris(0, 5, 4, 0, 1, 5, 2, 3, 11); break;
    //     case 43:  add_tris(2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5); break;
    //     case 44:  add_tris(10, 3, 11, 10, 1, 3, 9, 5, 4); break;
    //     case 45:  add_tris(4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10); break;
    //     case 46:  add_tris(5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3); break;
    //     case 47:  add_tris(5, 4, 8, 5, 8, 10, 10, 8, 11); break;
    //     case 48:  add_tris(9, 7, 8, 5, 7, 9); break;
    //     case 49:  add_tris(9, 3, 0, 9, 5, 3, 5, 7, 3); break;
    //     case 50:  add_tris(0, 7, 8, 0, 1, 7, 1, 5, 7); break;
    //     case 51:  add_tris(1, 5, 3, 3, 5, 7); break;
    //     case 52:  add_tris(9, 7, 8, 9, 5, 7, 10, 1, 2); break;
    //     case 53:  add_tris(10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3); break;
    //     case 54:  add_tris(8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2); break;
    //     case 55:  add_tris(2, 10, 5, 2, 5, 3, 3, 5, 7); break;
    //     case 56:  add_tris(7, 9, 5, 7, 8, 9, 3, 11, 2); break;
    //     case 57:  add_tris(9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11); break;
    //     case 58:  add_tris(2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7); break;
    //     case 59:  add_tris(11, 2, 1, 11, 1, 7, 7, 1, 5); break;
    //     case 60:  add_tris(9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11); break;
    //     case 61:  add_tris(5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0); break;
    //     case 62:  add_tris(11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0); break;
    //     case 63:  add_tris(11, 10, 5, 7, 11, 5); break;
    //     case 64:  add_tris(10, 6, 5); break;
    //     case 65:  add_tris(0, 8, 3, 5, 10, 6); break;
    //     case 66:  add_tris(9, 0, 1, 5, 10, 6); break;
    //     case 67:  add_tris(1, 8, 3, 1, 9, 8, 5, 10, 6); break;
    //     case 68:  add_tris(1, 6, 5, 2, 6, 1); break;
    //     case 69:  add_tris(1, 6, 5, 1, 2, 6, 3, 0, 8); break;
    //     case 70:  add_tris(9, 6, 5, 9, 0, 6, 0, 2, 6); break;
    //     case 71:  add_tris(5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8); break;
    //     case 72:  add_tris(2, 3, 11, 10, 6, 5); break;
    //     case 73:  add_tris(11, 0, 8, 11, 2, 0, 10, 6, 5); break;
    //     case 74:  add_tris(0, 1, 9, 2, 3, 11, 5, 10, 6); break;
    //     case 75:  add_tris(5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11); break;
    //     case 76:  add_tris(6, 3, 11, 6, 5, 3, 5, 1, 3); break;
    //     case 77:  add_tris(0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6); break;
    //     case 78:  add_tris(3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9); break;
    //     case 79:  add_tris(6, 5, 9, 6, 9, 11, 11, 9, 8); break;
    //     case 80:  add_tris(5, 10, 6, 4, 7, 8); break;
    //     case 81:  add_tris(4, 3, 0, 4, 7, 3, 6, 5, 10); break;
    //     case 82:  add_tris(1, 9, 0, 5, 10, 6, 8, 4, 7); break;
    //     case 83:  add_tris(10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4); break;
    //     case 84:  add_tris(6, 1, 2, 6, 5, 1, 4, 7, 8); break;
    //     case 85:  add_tris(1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7); break;
    //     case 86:  add_tris(8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6); break;
    //     case 87:  add_tris(7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9); break;
    //     case 88:  add_tris(3, 11, 2, 7, 8, 4, 10, 6, 5); break;
    //     case 89:  add_tris(5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11); break;
    //     case 90:  add_tris(0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6); break;
    //     case 91:  add_tris(9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6); break;
    //     case 92:  add_tris(8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6); break;
    //     case 93:  add_tris(5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11); break;
    //     case 94:  add_tris(0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7); break;
    //     case 95:  add_tris(6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9); break;
    //     case 96:  add_tris(10, 4, 9, 6, 4, 10); break;
    //     case 97:  add_tris(4, 10, 6, 4, 9, 10, 0, 8, 3); break;
    //     case 98:  add_tris(10, 0, 1, 10, 6, 0, 6, 4, 0); break;
    //     case 99:  add_tris(8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10); break;
    //     case 100: add_tris(1, 4, 9, 1, 2, 4, 2, 6, 4); break;
    //     case 101: add_tris(3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4); break;
    //     case 102: add_tris(0, 2, 4, 4, 2, 6); break;
    //     case 103: add_tris(8, 3, 2, 8, 2, 4, 4, 2, 6); break;
    //     case 104: add_tris(10, 4, 9, 10, 6, 4, 11, 2, 3); break;
    //     case 105: add_tris(0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6); break;
    //     case 106: add_tris(3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10); break;
    //     case 107: add_tris(6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1); break;
    //     case 108: add_tris(9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3); break;
    //     case 109: add_tris(8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1); break;
    //     case 110: add_tris(3, 11, 6, 3, 6, 0, 0, 6, 4); break;
    //     case 111: add_tris(6, 4, 8, 11, 6, 8); break;
    //     case 112: add_tris(7, 10, 6, 7, 8, 10, 8, 9, 10); break;
    //     case 113: add_tris(0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10); break;
    //     case 114: add_tris(10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0); break;
    //     case 115: add_tris(10, 6, 7, 10, 7, 1, 1, 7, 3); break;
    //     case 116: add_tris(1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7); break;
    //     case 117: add_tris(2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9); break;
    //     case 118: add_tris(7, 8, 0, 7, 0, 6, 6, 0, 2); break;
    //     case 119: add_tris(7, 3, 2, 6, 7, 2); break;
    //     case 120: add_tris(2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7); break;
    //     case 121: add_tris(2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7); break;
    //     case 122: add_tris(1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11); break;
    //     case 123: add_tris(11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1); break;
    //     case 124: add_tris(8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6); break;
    //     case 125: add_tris(0, 9, 1, 11, 6, 7); break;
    //     case 126: add_tris(7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0); break;
    //     case 127: add_tris(7, 11, 6); break;
    //     case 128: add_tris(7, 6, 11); break;
    //     case 129: add_tris(3, 0, 8, 11, 7, 6); break;
    //     case 130: add_tris(0, 1, 9, 11, 7, 6); break;
    //     case 131: add_tris(8, 1, 9, 8, 3, 1, 11, 7, 6); break;
    //     case 132: add_tris(10, 1, 2, 6, 11, 7); break;
    //     case 133: add_tris(1, 2, 10, 3, 0, 8, 6, 11, 7); break;
    //     case 134: add_tris(2, 9, 0, 2, 10, 9, 6, 11, 7); break;
    //     case 135: add_tris(6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8); break;
    //     case 136: add_tris(7, 2, 3, 6, 2, 7); break;
    //     case 137: add_tris(7, 0, 8, 7, 6, 0, 6, 2, 0); break;
    //     case 138: add_tris(2, 7, 6, 2, 3, 7, 0, 1, 9); break;
    //     case 139: add_tris(1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6); break;
    //     case 140: add_tris(10, 7, 6, 10, 1, 7, 1, 3, 7); break;
    //     case 141: add_tris(10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8); break;
    //     case 142: add_tris(0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7); break;
    //     case 143: add_tris(7, 6, 10, 7, 10, 8, 8, 10, 9); break;
    //     case 144: add_tris(6, 8, 4, 11, 8, 6); break;
    //     case 145: add_tris(3, 6, 11, 3, 0, 6, 0, 4, 6); break;
    //     case 146: add_tris(8, 6, 11, 8, 4, 6, 9, 0, 1); break;
    //     case 147: add_tris(9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6); break;
    //     case 148: add_tris(6, 8, 4, 6, 11, 8, 2, 10, 1); break;
    //     case 149: add_tris(1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6); break;
    //     case 150: add_tris(4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9); break;
    //     case 151: add_tris(10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3); break;
    //     case 152: add_tris(8, 2, 3, 8, 4, 2, 4, 6, 2); break;
    //     case 153: add_tris(0, 4, 2, 4, 6, 2); break;
    //     case 154: add_tris(1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8); break;
    //     case 155: add_tris(1, 9, 4, 1, 4, 2, 2, 4, 6); break;
    //     case 156: add_tris(8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1); break;
    //     case 157: add_tris(10, 1, 0, 10, 0, 6, 6, 0, 4); break;
    //     case 158: add_tris(4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3); break;
    //     case 159: add_tris(10, 9, 4, 6, 10, 4); break;
    //     case 160: add_tris(4, 9, 5, 7, 6, 11); break;
    //     case 161: add_tris(0, 8, 3, 4, 9, 5, 11, 7, 6); break;
    //     case 162: add_tris(5, 0, 1, 5, 4, 0, 7, 6, 11); break;
    //     case 163: add_tris(11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5); break;
    //     case 164: add_tris(9, 5, 4, 10, 1, 2, 7, 6, 11); break;
    //     case 165: add_tris(6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5); break;
    //     case 166: add_tris(7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2); break;
    //     case 167: add_tris(3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6); break;
    //     case 168: add_tris(7, 2, 3, 7, 6, 2, 5, 4, 9); break;
    //     case 169: add_tris(9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7); break;
    //     case 170: add_tris(3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0); break;
    //     case 171: add_tris(6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8); break;
    //     case 172: add_tris(9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7); break;
    //     case 173: add_tris(1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4); break;
    //     case 174: add_tris(4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10); break;
    //     case 175: add_tris(7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10); break;
    //     case 176: add_tris(6, 9, 5, 6, 11, 9, 11, 8, 9); break;
    //     case 177: add_tris(3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5); break;
    //     case 178: add_tris(0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11); break;
    //     case 179: add_tris(6, 11, 3, 6, 3, 5, 5, 3, 1); break;
    //     case 180: add_tris(1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6); break;
    //     case 181: add_tris(0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10); break;
    //     case 182: add_tris(11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5); break;
    //     case 183: add_tris(6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3); break;
    //     case 184: add_tris(5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2); break;
    //     case 185: add_tris(9, 5, 6, 9, 6, 0, 0, 6, 2); break;
    //     case 186: add_tris(1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8); break;
    //     case 187: add_tris(1, 5, 6, 2, 1, 6); break;
    //     case 188: add_tris(1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6); break;
    //     case 189: add_tris(10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0); break;
    //     case 190: add_tris(0, 3, 8, 5, 6, 10); break;
    //     case 191: add_tris(10, 5, 6); break;
    //     case 192: add_tris(11, 5, 10, 7, 5, 11); break;
    //     case 193: add_tris(11, 5, 10, 11, 7, 5, 8, 3, 0); break;
    //     case 194: add_tris(5, 11, 7, 5, 10, 11, 1, 9, 0); break;
    //     case 195: add_tris(10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1); break;
    //     case 196: add_tris(11, 1, 2, 11, 7, 1, 7, 5, 1); break;
    //     case 197: add_tris(0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11); break;
    //     case 198: add_tris(9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7); break;
    //     case 199: add_tris(7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2); break;
    //     case 200: add_tris(2, 5, 10, 2, 3, 5, 3, 7, 5); break;
    //     case 201: add_tris(8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5); break;
    //     case 202: add_tris(9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2); break;
    //     case 203: add_tris(9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2); break;
    //     case 204: add_tris(1, 3, 5, 3, 7, 5); break;
    //     case 205: add_tris(0, 8, 7, 0, 7, 1, 1, 7, 5); break;
    //     case 206: add_tris(9, 0, 3, 9, 3, 5, 5, 3, 7); break;
    //     case 207: add_tris(9, 8, 7, 5, 9, 7); break;
    //     case 208: add_tris(5, 8, 4, 5, 10, 8, 10, 11, 8); break;
    //     case 209: add_tris(5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0); break;
    //     case 210: add_tris(0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5); break;
    //     case 211: add_tris(10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4); break;
    //     case 212: add_tris(2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8); break;
    //     case 213: add_tris(0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11); break;
    //     case 214: add_tris(0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5); break;
    //     case 215: add_tris(9, 4, 5, 2, 11, 3); break;
    //     case 216: add_tris(2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4); break;
    //     case 217: add_tris(5, 10, 2, 5, 2, 4, 4, 2, 0); break;
    //     case 218: add_tris(3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9); break;
    //     case 219: add_tris(5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2); break;
    //     case 220: add_tris(8, 4, 5, 8, 5, 3, 3, 5, 1); break;
    //     case 221: add_tris(0, 4, 5, 1, 0, 5); break;
    //     case 222: add_tris(8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5); break;
    //     case 223: add_tris(9, 4, 5); break;
    //     case 224: add_tris(4, 11, 7, 4, 9, 11, 9, 10, 11); break;
    //     case 225: add_tris(0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11); break;
    //     case 226: add_tris(1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11); break;
    //     case 227: add_tris(3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4); break;
    //     case 228: add_tris(4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2); break;
    //     case 229: add_tris(9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3); break;
    //     case 230: add_tris(11, 7, 4, 11, 4, 2, 2, 4, 0); break;
    //     case 231: add_tris(11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4); break;
    //     case 232: add_tris(2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9); break;
    //     case 233: add_tris(9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7); break;
    //     case 234: add_tris(3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10); break;
    //     case 235: add_tris(1, 10, 2, 8, 7, 4); break;
    //     case 236: add_tris(4, 9, 1, 4, 1, 7, 7, 1, 3); break;
    //     case 237: add_tris(4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1); break;
    //     case 238: add_tris(4, 0, 3, 7, 4, 3); break;
    //     case 239: add_tris(4, 8, 7); break;
    //     case 240: add_tris(9, 10, 8, 10, 11, 8); break;
    //     case 241: add_tris(3, 0, 9, 3, 9, 11, 11, 9, 10); break;
    //     case 242: add_tris(0, 1, 10, 0, 10, 8, 8, 10, 11); break;
    //     case 243: add_tris(3, 1, 10, 11, 3, 10); break;
    //     case 244: add_tris(1, 2, 11, 1, 11, 9, 9, 11, 8); break;
    //     case 245: add_tris(3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9); break;
    //     case 246: add_tris(0, 2, 11, 8, 0, 11); break;
    //     case 247: add_tris(3, 2, 11); break;
    //     case 248: add_tris(2, 3, 8, 2, 8, 10, 10, 8, 9); break;
    //     case 249: add_tris(9, 10, 2, 0, 9, 2); break;
    //     case 250: add_tris(2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8); break;
    //     case 251: add_tris(1, 10, 2); break;
    //     case 252: add_tris(1, 3, 8, 9, 1, 8); break;
    //     case 253: add_tris(0, 9, 1); break;
    //     case 254: add_tris(0, 3, 8); break;
    //     case 255: break;
    // }
