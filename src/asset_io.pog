
struct Image {
    uint32 width, height;
    Color* pixels;
}

Image load_bitmap(char* filename) {

    struct Header {
        // uint16 magic_num;
        // 2 bytes pad (that should not be here)
        // NOTE: we exclude magic num from this struct as we have no way of removing struct padding
        uint32 file_bytesize;
        uint16 reserved1;
        uint16 reserved2;
        uint32 data_offset;
    }

    struct InfoHeader {
        uint32 size; // 40
        int32 width;
        int32 height;
        uint16 planes;
        uint16 bits_per_pixel;
        uint32 compression;
        uint32 image_size;
        int32 x_pixels_per_m;
        int32 y_pixels_per_m;
        uint32 colors_used;
        uint32 important_colors;
    }

    char* file_contents = fileread(filename, "rb");

    // TODO: assert correct magic number

    Header* head = (file_contents + 2) as Header*;
    InfoHeader* info = (file_contents + 14) as InfoHeader*;

    void* data = (file_contents + head.data_offset) as void*;
    Color* color_table = (file_contents + 54) as Color*;

    print("[INFO]: Loading bitmap file \"", filename, "\" (", head.file_bytesize, " bytes) (", info.bits_per_pixel, " bpp) (", info.width, "x", info.height, " pixels)\n");

    Image image;
    image.width = info.width as uint32;
    image.height = info.height as uint32;
    image.pixels = malloc(image.width * image.height * sizeof Color);

    switch info.bits_per_pixel {
        case 1: print("[ERROR]: .bmp file \"", filename, "\" with 1 bits per pixel not implemented yet.\n"); break;
        case 4: print("[ERROR]: .bmp file \"", filename, "\" with 4 bits per pixel not implemented yet.\n"); break;
        case 8: {
            uint8* bytes = data;
            for i : 0 .. info.width * info.height {
                image.pixels[i] = color_table[bytes[i]];
            }
        } break;

        case 16: print("[ERROR]: .bmp file \"", filename, "\" with 16 bits per pixel not implemented yet.\n"); break;

        case 24: {
            ColorRgb* colors = data;
            for i : 0 .. info.width * info.height {
                image.pixels[i].r = colors[i].b; // bitmap format is bgr, not rgb
                image.pixels[i].g = colors[i].g;
                image.pixels[i].b = colors[i].r;
                image.pixels[i].a = 255;
            }
        } break;

        case 32: {
            Color* colors = data;
            for i : 0 .. info.width * info.height {
                image.pixels[i] = colors[i];
            }
        } break;

        default: break; // TODO: error msg
    }

    free(file_contents);

    return image;
}
