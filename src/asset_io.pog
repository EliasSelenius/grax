
struct Image {
    uint32 width, height;
    Color* pixels;
}

struct Image_Boundingbox {
    ivec2 min, max;
}

bool inside_boundingbox(Image_Boundingbox bb, int32 x, y) return x <= bb.max.x and x >= bb.min.x and y <= bb.max.y and y >= bb.min.y;
ivec2 get_boundingbox_size(Image_Boundingbox bb) return add(sub(bb.max, bb.min), ivec2_one);


Color get_pixel(with Image image, uint32 x, y) { return image.pixels[y * image.width + x]; }

Image load_bitmap(char* filename) {

    struct Header {
        // uint16 magic_num;
        // 2 bytes pad (that should not be here)
        // NOTE: we exclude magic num from this struct as we have no way of removing struct padding
        uint32 file_bytesize;
        uint16 reserved1;
        uint16 reserved2;
        uint32 data_offset;
    }

    struct InfoHeader {
        uint32 size; // 40
        int32 width;
        int32 height;
        uint16 planes;
        uint16 bits_per_pixel;
        uint32 compression;
        uint32 image_size;
        int32 x_pixels_per_m;
        int32 y_pixels_per_m;
        uint32 colors_used;
        uint32 important_colors;
    }

    char* file_contents = fileread(filename, "rb");

    // TODO: assert correct magic number

    Header* head = (file_contents + 2) as Header*;
    InfoHeader* info = (file_contents + 14) as InfoHeader*;

    void* data = (file_contents + head.data_offset) as void*;
    Color* color_table = (file_contents + 54) as Color*;

    print("[INFO]: Loading bitmap file \"", filename, "\" (", head.file_bytesize, " bytes) (", info.bits_per_pixel, " bpp) (", info.width, "x", info.height, " pixels)\n");

    Image image = {};
    image.width = info.width as uint32;
    image.height = info.height as uint32;
    uint32 num_pixels = image.width * image.height;
    image.pixels = malloc(num_pixels * sizeof Color);

    switch info.bits_per_pixel {
        case 1: print("[ERROR]: .bmp file \"", filename, "\" with 1 bits per pixel not implemented yet.\n"); break;
        case 4: print("[ERROR]: .bmp file \"", filename, "\" with 4 bits per pixel not implemented yet.\n"); break;
        case 8: {
            uint8* bytes = data;
            for i : 0 .. num_pixels {
                image.pixels[i] = color_table[bytes[i]];
            }
        } break;

        case 16: print("[ERROR]: .bmp file \"", filename, "\" with 16 bits per pixel not implemented yet.\n"); break;

        case 24: {
            ColorRgb* colors = data;
            for i : 0 .. num_pixels {
                image.pixels[i].r = colors[i].b; // bitmap format is bgr, not rgb
                image.pixels[i].g = colors[i].g;
                image.pixels[i].b = colors[i].r;
                image.pixels[i].a = 255;
            }
        } break;

        case 32: {
            Color* colors = data;
            for i : 0 .. num_pixels {
                image.pixels[i].r = colors[i].b;
                image.pixels[i].g = colors[i].g;
                image.pixels[i].b = colors[i].r;
                image.pixels[i].a = colors[i].a;
            }
        } break;

        default: break; // TODO: error msg
    }

    free(file_contents);

    return image;
}



/* TODO: idea:
    since we only care about the boundingbox, we could try a different flood fill
    where we 'expand' the boundingbox and only recurse on the pixels that borders the boundingbox.
    this may also remove the necessity of the 'map' buffer
    might be faster, should benchmark...


    start with 1x1 boundingbox at starting pixel
    foreach of the 4 borders of the boundingbox
        foreach pixel of border
            if pixel is non-background
                expand boundingbox in direction of pixel
                break out of pixel loop
*/

Image_Boundingbox calc_boundingbox(Image image, uint32 x, y, bool eight_way) {
    Image_Boundingbox bb = {};
    bb.min = {x as int32, y as int32};
    bb.max = {x as int32, y as int32};

    loop:
    if get_pixel(image, bb.max.x + 1, bb.max.y + 1).a != 0 {
        bb.max = add(bb.max, ivec2_one);
        goto loop;
    }

    while true {
        let expanded = false;

        for (bb.min.x .. bb.max.x + 1) {
            // top
            if get_pixel(image, it, bb.max.y + 1).a != 0 {
                bb.max.y++;
                it = bb.min.x;
                expanded = true;
            }

            // bottom
            if get_pixel(image, it, bb.min.y - 1).a != 0 {
                bb.min.y--;
                it = bb.min.x;
                expanded = true;
            }
        }

        for (bb.min.y .. bb.max.y + 1) {
            // left
            if get_pixel(image, bb.min.x - 1, it).a != 0 {
                bb.min.x--;
                it = bb.min.y;
                expanded = true;
            }

            // right
            if get_pixel(image, bb.max.x + 1, it).a != 0 {
                bb.max.x++;
                it = bb.min.y;
                expanded = true;
            }
        }

        if !expanded break;
    }


    return bb;
}

Image_Boundingbox flood_fill(Image image, uint32 x, y, bool eight_way) {
    bool* map = calloc(1, image.width * image.height * sizeof bool);

    Image_Boundingbox bb = {
        min = {image.width, image.height},
        max = {0, 0}
    };

    void rec(Image_Boundingbox* bb, bool* map, Image image, uint32 x, y, bool eight_way) {
        if x >= image.width or y >= image.height  return;

        if map[y * image.width + x]       return;
        if get_pixel(image, x, y).a == 0  return;

        map[y * image.width + x] = true;

        bb.min = min(bb.min, make_ivec(x as int32, y as int32));
        bb.max = max(bb.max, make_ivec(x as int32, y as int32));

        rec(bb, map, image, x + 1, y, eight_way);
        rec(bb, map, image, x - 1, y, eight_way);
        rec(bb, map, image, x, y + 1, eight_way);
        rec(bb, map, image, x, y - 1, eight_way);

        if eight_way {
            rec(bb, map, image, x + 1, y + 1, eight_way);
            rec(bb, map, image, x - 1, y - 1, eight_way);
            rec(bb, map, image, x - 1, y + 1, eight_way);
            rec(bb, map, image, x + 1, y - 1, eight_way);
        }
    }

    rec(*bb, map, image, x, y, eight_way);
    free(map);
    return bb;
}

Image_Boundingbox* get_all_regions(Image image) {
    Image_Boundingbox* regions = list_create(sizeof Image_Boundingbox);

    for (uint32 y : 0 .. image.height) {
        for (uint32 x : 0 .. image.width) {
            Color pixel = get_pixel(image, x, y);
            if pixel.a == 0  continue;

            for 0 .. list_length(regions) if inside_boundingbox(regions[it], x as int32, y as int32) {
                x = (regions[it].max.x + 1) as uint32; // skip pixels we know are in the region
                goto next;
            }

            // let bb = flood_fill(image, x, y, true);
            let bb = calc_boundingbox(image, x, y, true);
            list_add(*regions, *bb);
            x = (bb.max.x + 1) as uint32; // skip pixels we know are in the region
            next:
        }
    }

    // for 0 .. list_length(regions) {
    //     let bb = regions[it];

    //     ivec2 size = sub(bb.max, bb.min);
    //     size = add(size, ivec2_one);
    //     print("pos = ", bb.min, "\nsize = ", size, "\n");
    // }

    return regions;
}
