

float64 sin(float64 t);
float64 asin(float64 t);
float32 sinf(float32 t);
float32 asinf(float32 t);
float64 cos(float64 t);
float64 acos(float64 t);
float32 cosf(float32 t);
float32 acosf(float32 t);
float64 tan(float64 t);
float64 atan(float64 t);
float32 tanf(float32 t);
float32 atanf(float32 t);
float64 sqrt(float64 x);
float32 sqrtf(float32 x);
float32 floorf(float32 x);
float64 pow(float64 b, float64 e);
float32 powf(float32 b, float32 e);
float64 exp(float64 x);
float32 expf(float32 x);


const Pi = 3.14159265359;
const Tau = Pi * 2.0;

const deg2rad = Pi / 180.0;
const rad2deg = 180.0 / Pi;


int32 min(int32 a, b) return a < b ? a : b;
ivec2 min(ivec2 a, b) return { min(a.x, b.x), min(a.y, b.y) };
ivec3 min(ivec3 a, b) return { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z) };
ivec4 min(ivec4 a, b) return { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w) };

int32 max(int32 a, b) return a < b ? b : a;
ivec2 max(ivec2 a, b) return { max(a.x, b.x), max(a.y, b.y) };
ivec3 max(ivec3 a, b) return { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z) };
ivec4 max(ivec4 a, b) return { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w) };

uint32 min(uint32 a, b) return a < b ? a : b;
uint32 max(uint32 a, b) return a < b ? b : a;

float32 min(float32 a, b) return a < b ? a : b;
vec2 min(vec2 a, b) return { min(a.x, b.x), min(a.y, b.y) };
vec3 min(vec3 a, b) return { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z) };
vec4 min(vec4 a, b) return { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w) };

float32 max(float32 a, b) return a < b ? b : a;
vec2 max(vec2 a, b) return { max(a.x, b.x), max(a.y, b.y) };
vec3 max(vec3 a, b) return { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z) };
vec4 max(vec4 a, b) return { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w) };

int32 clamp(int32 t, int32 min, int32 max) return t < min ? min : t > max ? max : t;
float32 clamp(float32 t, float32 min, float32 max) return t < min ? min : t > max ? max : t;

float32 lerp(float32 t, float32 a, float32 b) return a + (b - a) * t;
// map t from range [a, b] to [c, d]
float32 map(float32 t, float32 a, float32 b, float32 c, float32 d) return lerp((t - a) / (b - a), c, d);

/* from stackoverflow:
    int(x)   = x - x%1
    floor(x) = int(x)-(x<0 && x%1!=0)
    ceil(x)  = int(x)+(x>0 && x%1!=0)
    round(x) = floor(x)+(x>0&&x%1>=0.5)+(x<0&&(1+x%1)%1>=0.5)
    note: round(x) is not implemented as floor(x+0.5) as this will fail at x=0.5-2^-54

    note: logical operations are assumed to convert to integer values 1 for true and 0 for false
*/

float32 fract(float32 x) return x - floorf(x);
float32 round(float32 x) return floorf(x + 0.5);
float32 round2multiple(float32 x, n) return floorf(x/n + 0.5) * n;


float32 abs(float32 x) return x < 0 ? -x : x;
float64 abs(float64 x) return x < 0 ? -x : x;

bool is_nan(float32 x) return x != x;
bool is_nan(vec2 v) return is_nan(v.x) or is_nan(v.y);

struct vec2 { float32 x, y; }
struct ivec2 { int32 x, y; }

struct vec3 { float32 x, y, z; }
struct ivec3 { int32 x, y, z; }

struct vec4 { float32 x, y, z, w; }
struct ivec4 { int32 x, y, z, w; }

const vec2_zero = {0, 0} as vec2;
const vec2_one = {1, 1} as vec2;
const vec2_unit_x = {1, 0} as vec2;
const vec2_unit_y = {0, 1} as vec2;

const vec3_zero = {0, 0, 0} as vec3;
const vec3_one = {1, 1, 1} as vec3;
const vec3_unit_x = {1, 0, 0} as vec3;
const vec3_unit_y = {0, 1, 0} as vec3;
const vec3_unit_z = {0, 0, 1} as vec3;

const vec4_zero = {0, 0, 0, 0} as vec4;
const vec4_one = {1, 1, 1, 1} as vec4;
const vec4_unit_x = {1, 0, 0, 0} as vec4;
const vec4_unit_y = {0, 1, 0, 0} as vec4;
const vec4_unit_z = {0, 0, 1, 0} as vec4;
const vec4_unit_w = {0, 0, 0, 1} as vec4;

const ivec2_zero = {0, 0} as ivec2;
const ivec2_one = {1, 1} as ivec2;
const ivec2_unit_x = {1, 0} as ivec2;
const ivec2_unit_y = {0, 1} as ivec2;

const ivec3_zero = {0, 0, 0} as ivec3;
const ivec3_one = {1, 1, 1} as ivec3;
const ivec3_unit_x = {1, 0, 0} as ivec3;
const ivec3_unit_y = {0, 1, 0} as ivec3;
const ivec3_unit_z = {0, 0, 1} as ivec3;

const ivec4_zero = {0, 0, 0, 0} as ivec4;
const ivec4_one = {1, 1, 1, 1} as ivec4;
const ivec4_unit_x = {1, 0, 0, 0} as ivec4;
const ivec4_unit_y = {0, 1, 0, 0} as ivec4;
const ivec4_unit_z = {0, 0, 1, 0} as ivec4;
const ivec4_unit_w = {0, 0, 0, 1} as ivec4;

vec2 make_vec2(float32 v) return { v, v };
vec3 make_vec3(float32 v) return { v, v, v };
vec4 make_vec4(float32 v) return { v, v, v, v };
ivec2 make_ivec2(int32 v) return { v, v };
ivec3 make_ivec3(int32 v) return { v, v, v };
ivec4 make_ivec4(int32 v) return { v, v, v, v };

vec2 make_vec(float32 x, y) { return {x, y}; }
vec3 make_vec(float32 x, y, z) { return {x, y, z}; }
vec4 make_vec(float32 x, y, z, w) { return {x, y, z, w}; }
ivec2 make_ivec(int32 x, y) { return {x, y}; }
ivec3 make_ivec(int32 x, y, z) { return {x, y, z}; }
ivec4 make_ivec(int32 x, y, z, w) { return {x, y, z, w}; }

vec3 make_vec(vec2 xy, float32 z) { return { xy.x, xy.y, z }; }
vec3 make_vec(float32 x, vec2 yz) { return { x, yz.x, yz.y }; }
ivec3 make_ivec(ivec2 xy, int32 z) { return { xy.x, xy.y, z }; }
ivec3 make_ivec(int32 x, ivec2 yz) { return { x, yz.x, yz.y }; }

vec4 make_vec(vec3 xyz, float32 w) { return { xyz.x, xyz.y, xyz.z, w }; }
vec4 make_vec(float32 x, vec3 yzw) { return { x, yzw.x, yzw.y, yzw.z }; }
ivec4 make_ivec(ivec3 xyz, int32 w) { return { xyz.x, xyz.y, xyz.z, w }; }
ivec4 make_ivec(int32 x, ivec3 yzw) { return { x, yzw.x, yzw.y, yzw.z }; }

vec2 make_vec(ivec2 v) { return { v.x as float32, v.y as float32 }; }
vec3 make_vec(ivec3 v) { return { v.x as float32, v.y as float32, v.z as float32 }; }
vec4 make_vec(ivec4 v) { return { v.x as float32, v.y as float32, v.z as float32, v.w as float32 }; }
ivec2 make_ivec(vec2 v) { return { v.x as int32, v.y as int32 }; }
ivec3 make_ivec(vec3 v) { return { v.x as int32, v.y as int32, v.z as int32 }; }
ivec4 make_ivec(vec4 v) { return { v.x as int32, v.y as int32, v.z as int32, v.w as int32 }; }


bool equals(ivec2 a, b) as ==   return a.x == b.x and a.y == b.y;
bool equals(ivec3 a, b) as ==   return a.x == b.x and a.y == b.y and a.z == b.z;
bool equals(ivec4 a, b) as ==   return a.x == b.x and a.y == b.y and a.z == b.z and a.w == b.w;

vec2 round(vec2 v) { return { round(v.x), round(v.y) }; }
vec3 round(vec3 v) { return { round(v.x), round(v.y), round(v.z) }; }
vec4 round(vec4 v) { return { round(v.x), round(v.y), round(v.z), round(v.w) }; }

vec2 round2multiple(vec2 v, float32 n) { return { round2multiple(v.x, n), round2multiple(v.y, n) }; }
vec3 round2multiple(vec3 v, float32 n) { return { round2multiple(v.x, n), round2multiple(v.y, n), round2multiple(v.z, n) }; }
vec4 round2multiple(vec4 v, float32 n) { return { round2multiple(v.x, n), round2multiple(v.y, n), round2multiple(v.z, n), round2multiple(v.w, n) }; }


vec2 sub(vec2 a, b) as -  return { a.x - b.x, a.y - b.y };
vec3 sub(vec3 a, b) as -  return { a.x - b.x, a.y - b.y, a.z - b.z };
vec4 sub(vec4 a, b) as -  return { a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w };
ivec2 sub(ivec2 a, b) as -  return { a.x - b.x, a.y - b.y };
ivec3 sub(ivec3 a, b) as -  return { a.x - b.x, a.y - b.y, a.z - b.z };
ivec4 sub(ivec4 a, b) as -  return { a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w };

vec2 add(vec2 a, b) as +  return { a.x + b.x, a.y + b.y };
vec3 add(vec3 a, b) as +  return { a.x + b.x, a.y + b.y, a.z + b.z };
vec4 add(vec4 a, b) as +  return { a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w };
ivec2 add(ivec2 a, b) as +  return { a.x + b.x, a.y + b.y };
ivec3 add(ivec3 a, b) as +  return { a.x + b.x, a.y + b.y, a.z + b.z };
ivec4 add(ivec4 a, b) as +  return { a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w };

vec2 mul(vec2 a, b) as *  return { a.x * b.x, a.y * b.y };
vec3 mul(vec3 a, b) as *  return { a.x * b.x, a.y * b.y, a.z * b.z };
vec4 mul(vec4 a, b) as *  return { a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w };
ivec2 mul(ivec2 a, b) as *  return { a.x * b.x, a.y * b.y };
ivec3 mul(ivec3 a, b) as *  return { a.x * b.x, a.y * b.y, a.z * b.z };
ivec4 mul(ivec4 a, b) as *  return { a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w };

vec2 mul(vec2 a, float32 s) as *  return { a.x * s, a.y * s };
vec3 mul(vec3 a, float32 s) as *  return { a.x * s, a.y * s, a.z * s };
vec4 mul(vec4 a, float32 s) as *  return { a.x * s, a.y * s, a.z * s, a.w * s };
ivec2 mul(ivec2 a, int32 s) as *  return { a.x * s, a.y * s };
ivec3 mul(ivec3 a, int32 s) as *  return { a.x * s, a.y * s, a.z * s };
ivec4 mul(ivec4 a, int32 s) as *  return { a.x * s, a.y * s, a.z * s, a.w * s };

vec2 div(vec2 a, float32 s) as /  return { a.x / s, a.y / s };
vec3 div(vec3 a, float32 s) as /  return { a.x / s, a.y / s, a.z / s };
vec4 div(vec4 a, float32 s) as /  return { a.x / s, a.y / s, a.z / s, a.w / s };
ivec2 div(ivec2 a, int32 s) as /  return { a.x / s, a.y / s };
ivec3 div(ivec3 a, int32 s) as /  return { a.x / s, a.y / s, a.z / s };
ivec4 div(ivec4 a, int32 s) as /  return { a.x / s, a.y / s, a.z / s, a.w / s };


vec2 neg(vec2 a) { return { -a.x, -a.y }; }
vec3 neg(vec3 a) { return { -a.x, -a.y, -a.z }; }
vec4 neg(vec4 a) { return { -a.x, -a.y, -a.z, -a.w }; }
ivec2 neg(ivec2 a) { return { -a.x, -a.y }; }
ivec3 neg(ivec3 a) { return { -a.x, -a.y, -a.z }; }
ivec4 neg(ivec4 a) { return { -a.x, -a.y, -a.z, -a.w }; }


float32 angle(vec2 a, b) { return acosf(dot(a, b) / (length(a) * length(b))); }
float32 angle(vec3 a, b) { return acosf(dot(a, b) / (length(a) * length(b))); }
float32 angle(vec4 a, b) { return acosf(dot(a, b) / (length(a) * length(b))); }

float32 dot(vec2 a, b) { return a.x * b.x + a.y * b.y; }
float32 dot(vec3 a, b) { return a.x * b.x + a.y * b.y + a.z * b.z; }
float32 dot(vec4 a, b) { return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w; }

vec2 reflect(vec2 a, normal) { return add(a, mul(normal, dot(a, normal) * -2.0)); }
vec3 reflect(vec3 a, normal) { return add(a, mul(normal, dot(a, normal) * -2.0)); }
vec4 reflect(vec4 a, normal) { return add(a, mul(normal, dot(a, normal) * -2.0)); }

vec2 normalize(vec2 a) { return mul(a, 1.0 / length(a)); }
vec3 normalize(vec3 a) { return mul(a, 1.0 / length(a)); }
vec4 normalize(vec4 a) { return mul(a, 1.0 / length(a)); }

vec2 lerp(float32 t, vec2 a, b) { return add(a, mul(sub(b, a), t)); }
vec3 lerp(float32 t, vec3 a, b) { return add(a, mul(sub(b, a), t)); }
vec4 lerp(float32 t, vec4 a, b) { return add(a, mul(sub(b, a), t)); }

float32 sqlength(vec2 a) { return dot(a, a); }
float32 sqlength(vec3 a) { return dot(a, a); }
float32 sqlength(vec4 a) { return dot(a, a); }

float32 length(vec2 a) { return sqrtf(dot(a, a)); }
float32 length(vec3 a) { return sqrtf(dot(a, a)); }
float32 length(vec4 a) { return sqrtf(dot(a, a)); }

float32 dist(vec2 a, b) { return length(sub(a, b)); }
float32 dist(vec3 a, b) { return length(sub(a, b)); }
float32 dist(vec4 a, b) { return length(sub(a, b)); }

float32 sqdist(vec2 a, b) { return sqlength(sub(a, b)); }
float32 sqdist(vec3 a, b) { return sqlength(sub(a, b)); }
float32 sqdist(vec4 a, b) { return sqlength(sub(a, b)); }

vec2 xy(vec3 a)  return {a.x, a.y};
vec2 xy(vec4 a)  return {a.x, a.y};
vec2 xz(vec3 a)  return {a.x, a.z};
vec2 xz(vec4 a)  return {a.x, a.z};

vec3 xyz(vec4 a) return {a.x, a.y, a.z};

vec3 cross(vec3 a, vec3 b) {
    return { a.y * b.z - a.z * b.y,
             a.z * b.x - a.x * b.z,
             a.x * b.y - a.y * b.x };
}

struct mat2 {
    vec2 row1, row2;
}

mat2 mat2_identity() {
    return {1,0,
            0,1};
}

vec2 col1(mat2 m) { return { m.row1.x, m.row2.x }; }
vec2 col2(mat2 m) { return { m.row1.y, m.row2.y }; }
mat2 transpose(mat2 m) { return { col1(m), col2(m) }; }
float32 det(mat2 m) { return m.row1.x * m.row2.y - m.row1.y * m.row2.x; }

mat2 mul(mat2 a, mat2 b) {
    mat2 res;
    res.row1.x = dot(a.row1, col1(b));
    res.row1.y = dot(a.row1, col2(b));
    res.row2.x = dot(a.row2, col1(b));
    res.row2.y = dot(a.row2, col2(b));
    return res;
}

vec2 mul(mat2 m, vec2 v) {
    return { dot(m.row1, v), dot(m.row2, v) };
}

vec2 mul(vec2 v, mat2 m) {
    return { dot(v, col1(m)), dot(v, col2(m)) };
}


struct mat3 {
    vec3 row1, row2, row3;
}

mat3 mat3_identity() {
    return {1,0,0,
            0,1,0,
            0,0,1};
}

vec3 col1(mat3 m) { return { m.row1.x, m.row2.x, m.row3.x }; }
vec3 col2(mat3 m) { return { m.row1.y, m.row2.y, m.row3.y }; }
vec3 col3(mat3 m) { return { m.row1.z, m.row2.z, m.row3.z }; }
mat3 transpose(mat3 m) { return { col1(m), col2(m), col3(m) }; }

mat3 mul(mat3 a, mat3 b) {
    mat3 res;

    res.row1.x = dot(a.row1, col1(b));
    res.row1.y = dot(a.row1, col2(b));
    res.row1.z = dot(a.row1, col3(b));

    res.row2.x = dot(a.row2, col1(b));
    res.row2.y = dot(a.row2, col2(b));
    res.row2.z = dot(a.row2, col3(b));

    res.row3.x = dot(a.row3, col1(b));
    res.row3.y = dot(a.row3, col2(b));
    res.row3.z = dot(a.row3, col3(b));

    return res;
}

vec3 mul(mat3 m, vec3 v) {
    return { dot(m.row1, v), dot(m.row2, v), dot(m.row3, v) };
}

vec3 mul(vec3 v, mat3 m) {
    return { dot(v, col1(m)), dot(v, col2(m)), dot(v, col3(m)) };
}


struct mat4 {
    vec4 row1, row2, row3, row4;
}

mat4 mat4_identity() {
    return {1,0,0,0,
            0,1,0,0,
            0,0,1,0,
            0,0,0,1};
}


mat4 make_mat4(vec3 pos, scale) return { scale.x, 0, 0, 0,
                                         0, scale.y, 0, 0,
                                         0, 0, scale.z, 0,
                                         pos.x, pos.y, pos.z, 1 };
mat4 make_mat4(vec3 pos, float32 scale) return make_mat4(pos, make_vec3(scale));

vec4 col1(mat4 m) { return { m.row1.x, m.row2.x, m.row3.x, m.row4.x }; }
vec4 col2(mat4 m) { return { m.row1.y, m.row2.y, m.row3.y, m.row4.y }; }
vec4 col3(mat4 m) { return { m.row1.z, m.row2.z, m.row3.z, m.row4.z }; }
vec4 col4(mat4 m) { return { m.row1.w, m.row2.w, m.row3.w, m.row4.w }; }
mat4 transpose(mat4 m) { return { col1(m), col2(m), col3(m), col4(m) }; }

mat4 mul(mat4 a, mat4 b) {
    mat4 res;

    res.row1.x = dot(a.row1, col1(b));
    res.row1.y = dot(a.row1, col2(b));
    res.row1.z = dot(a.row1, col3(b));
    res.row1.w = dot(a.row1, col4(b));

    res.row2.x = dot(a.row2, col1(b));
    res.row2.y = dot(a.row2, col2(b));
    res.row2.z = dot(a.row2, col3(b));
    res.row2.w = dot(a.row2, col4(b));

    res.row3.x = dot(a.row3, col1(b));
    res.row3.y = dot(a.row3, col2(b));
    res.row3.z = dot(a.row3, col3(b));
    res.row3.w = dot(a.row3, col4(b));

    res.row4.x = dot(a.row4, col1(b));
    res.row4.y = dot(a.row4, col2(b));
    res.row4.z = dot(a.row4, col3(b));
    res.row4.w = dot(a.row4, col4(b));

    return res;
}

vec4 mul(mat4 m, vec4 v) {
    return { dot(m.row1, v), dot(m.row2, v), dot(m.row3, v), dot(m.row4, v) };
}

vec4 mul(vec4 v, mat4 m) {
    return { dot(v, col1(m)), dot(v, col2(m)), dot(v, col3(m)), dot(v, col4(m)) };
}

mat4 perspective(float32 fovy, aspect, near_depth, far_depth) {
    float32 maxY = near_depth * tanf(0.5 * fovy);
    float32 minY = -maxY;
    float32 minX = minY * aspect;
    float32 maxX = maxY * aspect;

    return perspective_off_center(minX, maxX, minY, maxY, near_depth, far_depth);
}

mat4 perspective_off_center(float32 left, right, bottom, top, near_depth, far_depth) {
    float32 x = 2.0 * near_depth / (right - left);
    float32 y = 2.0 * near_depth / (top - bottom);
    float32 a = (right + left) / (right - left);
    float32 b = (top + bottom) / (top - bottom);
    float32 c = -(far_depth + near_depth) / (far_depth - near_depth);
    float32 d = -(2.0 * far_depth * near_depth) / (far_depth - near_depth);

    return {
        { x,  0,  0,  0 },
        { 0,  y,  0,  0 },
        { a,  b,  c, -1 },
        { 0,  0,  d,  0 }
    };
}


// Quaternion in the form:
//     w + xi + yj + zk
struct quat {
    float32 x, y, z, w;
}

quat conj(quat q) { return { -q.x, -q.y, -q.z, q.w }; }
quat normalize(quat q) {
    let l = sqrtf(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);
    return { q.x / l, q.y / l, q.z / l, q.w / l };
}

quat lerp(float32 t, quat a, quat b) { return add(a, mul(sub(b, a), t)); } // TODO: are these correct? lerp and nlerp
quat nlerp(float32 t, quat a, quat b) {
    return normalize(lerp(t, a, b));
}

quat sub(quat a, quat b) { return {a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w}; }
quat add(quat a, quat b) { return {a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w}; }
quat mul(quat a, float32 s) { return {a.x * s, a.y * s, a.z * s, a.w * s}; }

quat mul(quat l, quat r) {
    float32 a = l.w;
    float32 b = l.x;
    float32 c = l.y;
    float32 d = l.z;
    float32 e = r.w;
    float32 f = r.x;
    float32 g = r.y;
    float32 h = r.z;

    return {
        b*e + a*f + c*h - d*g,
        a*g - b*h + c*e + d*f,
        a*h + b*g - c*f + d*e,
        a*e - b*f - c*g - d*h
    };
}

quat axisangle2quat(vec3 axis, float32 angle) {
    let ha = angle / 2.0;
    let s = sinf(ha);

    quat res;
    res.x = axis.x * s;
    res.y = axis.y * s;
    res.z = axis.z * s;
    res.w = cosf(ha);
    return res;
}

quat matrix2quat(mat4 m) {
    float32 trace = m.row1.x + m.row2.y + m.row3.z;
    if trace > 0 {
        float32 s = 0.5 / sqrtf(trace + 1.0);
        return { (m.row3.y - m.row2.z) * s, (m.row1.z - m.row3.x) * s, (m.row2.x - m.row1.y) * s, 0.25 / s };
    }

    if m.row1.x > m.row2.y and m.row1.x > m.row3.z {
        float32 s = 2 * sqrtf(1 + m.row1.x - m.row2.y - m.row3.z);
        return { 0.25 * s, (m.row1.y + m.row2.x) / s, (m.row1.z + m.row3.x) / s, (m.row3.y - m.row2.z) / s };
    }

    if m.row2.y > m.row3.z {
        float32 s = 2 * sqrtf(1 + m.row2.y - m.row1.x - m.row3.z);
        return { (m.row1.y + m.row2.x) / s, 0.25 * s, (m.row2.z + m.row3.y) / s, (m.row1.z - m.row3.x) / s };
    }

    float32 s = 2 * sqrtf(1 + m.row3.z - m.row1.x - m.row2.y);
    return { (m.row1.z + m.row3.x) / s, (m.row2.z + m.row3.y) / s, 0.25 * s, (m.row2.x - m.row1.y) / s };
}

mat4 quat2matrix(quat q) {
    float32 xx = q.x * q.x;
    float32 xy = q.x * q.y;
    float32 xz = q.x * q.z;
    float32 xw = q.x * q.w;
    float32 yy = q.y * q.y;
    float32 yz = q.y * q.z;
    float32 yw = q.y * q.w;
    float32 zz = q.z * q.z;
    float32 zw = q.z * q.w;

    return {
        1.0 - (yy + zz)*2.0,         (xy - zw)*2.0,         (xz + yw)*2.0,    0,
              (xy + zw)*2.0,   1.0 - (xx + zz)*2.0,         (yz - xw)*2.0,    0,
              (xz - yw)*2.0,         (yz + xw)*2.0,   1.0 - (xx + yy)*2.0,    0,
        0,                0,                     0,                           1
    };
}
