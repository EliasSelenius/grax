

float64 sin(float64 t);
float64 asin(float64 t);
float32 sinf(float32 t);
float32 asinf(float32 t);
float64 cos(float64 t);
float64 acos(float64 t);
float32 cosf(float32 t);
float32 acosf(float32 t);
float64 tan(float64 t);
float64 atan(float64 t);
float32 tanf(float32 t);
float32 atanf(float32 t);
float64 sqrt(float64 x);
float32 sqrtf(float32 x);
float32 floorf(float32 x);
float64 pow(float64 b, float64 e);
float32 powf(float32 b, float32 e);

const Pi = 3.14159265359;
const Tau = Pi * 2.0;

const deg2rad = Pi / 180.0;
const rad2deg = 180.0 / Pi;

float32 random(int32 seed) {
    seed = (seed << 13) ^ seed;
    return (1.0 - ((seed * (seed * seed * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);
}

// // TODO: the 'quality' of randomnes is not tested here
// float32 random(int32 seed_x, int32 seed_y) {
//     return random(seed_x + seed_y * 57);
// }

vec2 random_vec2(float32 x, float32 y) {
    vec2 v;
    v.x = x * 127.1 + y * 311.7;
    v.y = x * 268.5 + y * 183.3;

    v.x = fract(sinf(v.x) * 43758.5453123) * 2.0 - 1.0;
    v.y = fract(sinf(v.y) * 43758.5453123) * 2.0 - 1.0;

    return v;
}


float32 gnoise(float32 x, float32 y) {
    float32 ix = floorf(x);
    float32 iy = floorf(y);
    float32 fx = fract(x);
    float32 fy = fract(y);

    float32 ux = fx * fx * (-fx * 2.0 + 3.0);
    float32 uy = fy * fy * (-fy * 2.0 + 3.0);

    vec2 r = random_vec2(ix, iy);
    float32 d1 = r.x * fx + r.y * fy;

    r = random_vec2(ix + 1.0, iy);
    float32 d2 = r.x * (fx - 1.0) + r.y * fy;

    r = random_vec2(ix, iy + 1.0);
    float32 d3 = r.x * fx + r.y * (fy - 1.0);

    r = random_vec2(ix + 1.0, iy + 1.0);
    float32 d4 = r.x * (fx - 1.0) + r.y * (fy - 1.0);

    return lerp(uy, lerp(ux, d1, d2), lerp(ux, d3, d4));
}


int32 min(int32 a, int32 b) { return a < b ? a : b; }
int32 max(int32 a, int32 b) { return a < b ? b : a; }

int32 clamp(int32 t, int32 min, int32 max) { return t < min ? min : t > max ? max : t; }
float32 clamp(float32 t, float32 min, float32 max) { return t < min ? min : t > max ? max : t; }

float32 lerp(float32 t, float32 a, float32 b) { return a + (b - a) * t; }

int32 round2int(float32 x) { return (x + 0.5) as int32; }
float32 fract(float32 x) { return x - floorf(x); }

int32 is_nan(float32 x) { return x != x; }
int32 is_nan(vec2 v) { return is_nan(v.x) or is_nan(v.y); }

struct vec2 { float32 x, y; }
struct ivec2 { int32 x, y; }

struct vec3 { float32 x, y, z; }
struct ivec3 { int32 x, y, z; }

struct vec4 { float32 x, y, z, w; }
struct ivec4 { int32 x, y, z, w; }

const vec2_zero = {0, 0} as vec2;
const vec2_one = {1, 1} as vec2;
const vec2_unit_x = {1, 0} as vec2;
const vec2_unit_y = {0, 1} as vec2;

const vec3_zero = {0, 0, 0} as vec3;
const vec3_one = {1, 1, 1} as vec3;
const vec3_unit_x = {1, 0, 0} as vec3;
const vec3_unit_y = {0, 1, 0} as vec3;
const vec3_unit_z = {0, 0, 1} as vec3;

const vec4_zero = {0, 0, 0, 0} as vec4;
const vec4_one = {1, 1, 1, 1} as vec4;
const vec4_unit_x = {1, 0, 0, 0} as vec4;
const vec4_unit_y = {0, 1, 0, 0} as vec4;
const vec4_unit_z = {0, 0, 1, 0} as vec4;
const vec4_unit_w = {0, 0, 0, 1} as vec4;

vec2 make_vec(float32 x, float32 y) { return {x, y}; }
vec3 make_vec(float32 x, float32 y, float32 z) { return {x, y, z}; }
vec4 make_vec(float32 x, float32 y, float32 z, float32 w) { return {x, y, z, w}; }

vec2 sub(vec2 a, vec2 b) { return make_vec(a.x - b.x, a.y - b.y); }
vec2 add(vec2 a, vec2 b) { return make_vec(a.x + b.x, a.y + b.y); }
vec2 mul(vec2 a, vec2 b) { return make_vec(a.x * b.x, a.y * b.y); }
vec2 mul(vec2 a, float32 s) { return make_vec(a.x * s, a.y * s); }
vec2 neg(vec2 a) { return make_vec(-a.x, -a.y); }

vec3 sub(vec3 a, vec3 b) { return make_vec(a.x - b.x, a.y - b.y, a.z - b.z); }
vec3 add(vec3 a, vec3 b) { return make_vec(a.x + b.x, a.y + b.y, a.z + b.z); }
vec3 mul(vec3 a, vec3 b) { return make_vec(a.x * b.x, a.y * b.y, a.z * b.z); }
vec3 mul(vec3 a, float32 s) { return make_vec(a.x * s, a.y * s, a.z * s); }
vec3 neg(vec3 a) { return make_vec(-a.x, -a.y, -a.z); }

vec4 sub(vec4 a, vec4 b) { return make_vec(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w); }
vec4 add(vec4 a, vec4 b) { return make_vec(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w); }
vec4 mul(vec4 a, vec4 b) { return make_vec(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w); }
vec4 mul(vec4 a, float32 s) { return make_vec(a.x * s, a.y * s, a.z * s, a.w * s); }
vec4 neg(vec4 a) { return make_vec(-a.x, -a.y, -a.z, -a.w); }


float32 dot(vec2 a, vec2 b) { return a.x * b.x + a.y * b.y; }
float32 sqlength(vec2 a) { return dot(a, a); }
float32 length(vec2 a) { return sqrtf(dot(a, a)); }
vec2 normalize(vec2 a) { return mul(a, 1.0 / length(a)); }
vec2 reflect(vec2 a, vec2 normal) { return add(a, mul(normal, dot(a, normal) * -2.0)); }
vec2 lerp(float32 t, vec2 a, vec2 b) { return add(a, mul(sub(b, a), t)); }

float32 dot(vec3 a, vec3 b) { return a.x * b.x + a.y * b.y + a.z * b.z; }
float32 sqlength(vec3 a) { return dot(a, a); }
float32 length(vec3 a) { return sqrtf(dot(a, a)); }
vec3 normalize(vec3 a) { return mul(a, 1.0 / length(a)); }
vec3 reflect(vec3 a, vec3 normal) { return add(a, mul(normal, dot(a, normal) * -2.0)); }
vec3 lerp(float32 t, vec3 a, vec3 b) { return add(a, mul(sub(b, a), t)); }
vec3 cross(vec3 a, vec3 b) {
    return { a.y * b.z - a.z * b.y,
             a.z * b.x - a.x * b.z,
             a.x * b.y - a.y * b.x };
}

float32 dot(vec4 a, vec4 b) { return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w; }
float32 sqlength(vec4 a) { return dot(a, a); }
float32 length(vec4 a) { return sqrtf(dot(a, a)); }
vec4 normalize(vec4 a) { return mul(a, 1.0 / length(a)); }
vec4 reflect(vec4 a, vec4 normal) { return add(a, mul(normal, dot(a, normal) * -2.0)); }
vec4 lerp(float32 t, vec4 a, vec4 b) { return add(a, mul(sub(b, a), t)); }


vec2 xy(vec3 a) { return {a.x, a.y}; }
vec2 xy(vec4 a) { return {a.x, a.y}; }
vec3 xyz(vec4 a) { return {a.x, a.y, a.z}; }


struct mat2 {
    vec2 row1, row2;
}

mat2 mat2_identity() {
    return {1,0,
            0,1};
}

vec2 col1(mat2 m) { return { m.row1.x, m.row2.x }; }
vec2 col2(mat2 m) { return { m.row1.y, m.row2.y }; }
mat2 transpose(mat2 m) { return { col1(m), col2(m) }; }
float32 det(mat2 m) { return m.row1.x * m.row2.y - m.row1.y * m.row2.x; }

mat2 mul(mat2 a, mat2 b) {
    mat2 res;
    res.row1.x = dot(a.row1, col1(b));
    res.row1.y = dot(a.row1, col2(b));
    res.row2.x = dot(a.row2, col1(b));
    res.row2.y = dot(a.row2, col2(b));
    return res;
}

vec2 mul(mat2 m, vec2 v) {
    return { dot(m.row1, v), dot(m.row2, v) };
}

vec2 mul(vec2 v, mat2 m) {
    return { dot(v, col1(m)), dot(v, col2(m)) };
}


struct mat3 {
    vec3 row1, row2, row3;
}

mat3 mat3_identity() {
    return {1,0,0,
            0,1,0,
            0,0,1};
}

vec3 col1(mat3 m) { return { m.row1.x, m.row2.x, m.row3.x }; }
vec3 col2(mat3 m) { return { m.row1.y, m.row2.y, m.row3.y }; }
vec3 col3(mat3 m) { return { m.row1.z, m.row2.z, m.row3.z }; }
mat3 transpose(mat3 m) { return { col1(m), col2(m), col3(m) }; }

mat3 mul(mat3 a, mat3 b) {
    mat3 res;

    res.row1.x = dot(a.row1, col1(b));
    res.row1.y = dot(a.row1, col2(b));
    res.row1.z = dot(a.row1, col3(b));

    res.row2.x = dot(a.row2, col1(b));
    res.row2.y = dot(a.row2, col2(b));
    res.row2.z = dot(a.row2, col3(b));

    res.row3.x = dot(a.row3, col1(b));
    res.row3.y = dot(a.row3, col2(b));
    res.row3.z = dot(a.row3, col3(b));

    return res;
}

vec3 mul(mat3 m, vec3 v) {
    return { dot(m.row1, v), dot(m.row2, v), dot(m.row3, v) };
}

vec3 mul(vec3 v, mat3 m) {
    return { dot(v, col1(m)), dot(v, col2(m)), dot(v, col3(m)) };
}


struct mat4 {
    vec4 row1, row2, row3, row4;
}

mat4 mat4_identity() {
    return {1,0,0,0,
            0,1,0,0,
            0,0,1,0,
            0,0,0,1};
}

vec4 col1(mat4 m) { return { m.row1.x, m.row2.x, m.row3.x, m.row4.x }; }
vec4 col2(mat4 m) { return { m.row1.y, m.row2.y, m.row3.y, m.row4.y }; }
vec4 col3(mat4 m) { return { m.row1.z, m.row2.z, m.row3.z, m.row4.z }; }
vec4 col4(mat4 m) { return { m.row1.w, m.row2.w, m.row3.w, m.row4.w }; }
mat4 transpose(mat4 m) { return { col1(m), col2(m), col3(m), col4(m) }; }

mat4 mul(mat4 a, mat4 b) {
    mat4 res;

    res.row1.x = dot(a.row1, col1(b));
    res.row1.y = dot(a.row1, col2(b));
    res.row1.z = dot(a.row1, col3(b));
    res.row1.w = dot(a.row1, col4(b));

    res.row2.x = dot(a.row2, col1(b));
    res.row2.y = dot(a.row2, col2(b));
    res.row2.z = dot(a.row2, col3(b));
    res.row2.w = dot(a.row2, col4(b));

    res.row3.x = dot(a.row3, col1(b));
    res.row3.y = dot(a.row3, col2(b));
    res.row3.z = dot(a.row3, col3(b));
    res.row3.w = dot(a.row3, col4(b));

    res.row4.x = dot(a.row4, col1(b));
    res.row4.y = dot(a.row4, col2(b));
    res.row4.z = dot(a.row4, col3(b));
    res.row4.w = dot(a.row4, col4(b));

    return res;
}

vec4 mul(mat4 m, vec4 v) {
    return { dot(m.row1, v), dot(m.row2, v), dot(m.row3, v), dot(m.row4, v) };
}

vec4 mul(vec4 v, mat4 m) {
    return { dot(v, col1(m)), dot(v, col2(m)), dot(v, col3(m)), dot(v, col4(m)) };
}

mat4 perspective(float32 fovy, float32 aspect, float32 near_depth, float32 far_depth) {
    float32 maxY = near_depth * tanf(0.5 * fovy);
    float32 minY = -maxY;
    float32 minX = minY * aspect;
    float32 maxX = maxY * aspect;

    return perspective_off_center(minX, maxX, minY, maxY, near_depth, far_depth);
}

mat4 perspective_off_center(
    float32 left,
    float32 right,
    float32 bottom,
    float32 top,
    float32 near_depth,
    float32 far_depth
) {
    float32 x = 2.0 * near_depth / (right - left);
    float32 y = 2.0 * near_depth / (top - bottom);
    float32 a = (right + left) / (right - left);
    float32 b = (top + bottom) / (top - bottom);
    float32 c = -(far_depth + near_depth) / (far_depth - near_depth);
    float32 d = -(2.0 * far_depth * near_depth) / (far_depth - near_depth);

    return {
        { x,  0,  0,  0 },
        { 0,  y,  0,  0 },
        { a,  b,  c, -1 },
        { 0,  0,  d,  0 }
    };
}


// Quaternion in the form:
//     w + xi + yj + zk
struct quat {
    float32 x, y, z, w;
}

quat conj(quat q) { return { -q.x, -q.y, -q.z, q.w }; }
quat normalize(quat q) {
    let l = sqrtf(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);
    return { q.x / l, q.y / l, q.z / l, q.w / l };
}


quat sub(quat a, quat b) { return {a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w}; }
quat add(quat a, quat b) { return {a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w}; }
quat mul(quat a, float32 s) { return {a.x * s, a.y * s, a.z * s, a.w * s}; }

quat lerp(float32 t, quat a, quat b) { return add(a, mul(sub(b, a), t)); } // TODO: are these correct? lerp and nlerp
quat nlerp(float32 t, quat a, quat b) {
    return normalize(lerp(t, a, b));
}

quat mul(quat l, quat r) {
    float32 a = l.w;
    float32 b = l.x;
    float32 c = l.y;
    float32 d = l.z;
    float32 e = r.w;
    float32 f = r.x;
    float32 g = r.y;
    float32 h = r.z;

    return {
        b*e + a*f + c*h - d*g,
        a*g - b*h + c*e + d*f,
        a*h + b*g - c*f + d*e,
        a*e - b*f - c*g - d*h
    };
}

quat axisangle2quat(vec3 axis, float32 angle) {
    let ha = angle / 2.0;
    let s = sinf(ha);

    quat res;
    res.x = axis.x * s;
    res.y = axis.y * s;
    res.z = axis.z * s;
    res.w = cosf(ha);
    return res;
}

// quat matrix2quat(mat4 m) {
//     float32 trace = m->m[0][0] + m->m[1][1] + m->m[2][2];
//     if trace > 0 {
//         float32 s = 0.5 / sqrtf(trace + 1.0);
//         return {
//             ( m->m[2][1] - m->m[1][2] ) * s,
//             ( m->m[0][2] - m->m[2][0] ) * s,
//             ( m->m[1][0] - m->m[0][1] ) * s,
//             0.25f / s
//         };
//     }

//     if ( m->m[0][0] > m->m[1][1] && m->m[0][0] > m->m[2][2] ) {
//         float s = 2.0f * sqrtf( 1.0f + m->m[0][0] - m->m[1][1] - m->m[2][2]);
//         out_result->w = (m->m[2][1] - m->m[1][2] ) / s;
//         out_result->x = 0.25f * s;
//         out_result->y = (m->m[0][1] + m->m[1][0] ) / s;
//         out_result->z = (m->m[0][2] + m->m[2][0] ) / s;
//     } else if (m->m[1][1] > m->m[2][2]) {
//         float s = 2.0f * sqrtf( 1.0f + m->m[1][1] - m->m[0][0] - m->m[2][2]);
//         out_result->w = (m->m[0][2] - m->m[2][0] ) / s;
//         out_result->x = (m->m[0][1] + m->m[1][0] ) / s;
//         out_result->y = 0.25f * s;
//         out_result->z = (m->m[1][2] + m->m[2][1] ) / s;
//     } else {
//         float s = 2.0f * sqrtf( 1.0f + m->m[2][2] - m->m[0][0] - m->m[1][1] );
//         out_result->w = (m->m[1][0] - m->m[0][1] ) / s;
//         out_result->x = (m->m[0][2] + m->m[2][0] ) / s;
//         out_result->y = (m->m[1][2] + m->m[2][1] ) / s;
//         out_result->z = 0.25f * s;
//     }
// }

mat4 quat2matrix(quat q) {
    float32 xx = q.x * q.x;
    float32 xy = q.x * q.y;
    float32 xz = q.x * q.z;
    float32 xw = q.x * q.w;
    float32 yy = q.y * q.y;
    float32 yz = q.y * q.z;
    float32 yw = q.y * q.w;
    float32 zz = q.z * q.z;
    float32 zw = q.z * q.w;

    return {
        1.0 - (yy + zz)*2.0,         (xy - zw)*2.0,         (xz + yw)*2.0,    0,
              (xy + zw)*2.0,   1.0 - (xx + zz)*2.0,         (yz - xw)*2.0,    0,
              (xz - yw)*2.0,         (yz + xw)*2.0,   1.0 - (xx + yy)*2.0,    0,
        0,                0,                     0,                           1
    };
}
