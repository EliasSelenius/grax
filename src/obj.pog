
struct OBJ_Data {
    string file_name;

    OBJ_Object[..] objects;

    vec3[..] vertices;
    vec2[..] texture_coords;
    vec3[..] normals;

    OBJ_VertexIndices[..] indices;
}

struct OBJ_VertexIndices {
    uint32 pos, text_coord, normal;
}

struct OBJ_Object {
    string name;
    uint32 indices_start;
    uint32 indices_length;
    char group_type; // o g // TODO: this may include usemtl in the future
}

void free_obj(OBJ_Data obj) {

    for 0 .. list_length(obj.objects) {
        free(obj.objects[it].name.chars);
    }
    list_delete(obj.objects);

    free(obj.file_name.chars);
    list_delete(obj.vertices);
    list_delete(obj.texture_coords);
    list_delete(obj.normals);
    list_delete(obj.indices);
}

OBJ_Data load_obj(char* filename) {
    char* source = fileread(filename);

    OBJ_Data obj;
    obj.file_name = alloc_string_copy(make_string(filename));

    obj.objects = list_create(sizeof OBJ_Object);
    obj.vertices = list_create(sizeof vec3);
    obj.texture_coords = list_create(sizeof vec2);
    obj.normals = list_create(sizeof vec3);
    obj.indices = list_create(sizeof OBJ_VertexIndices);

    vec3 parse_vec3(char* cursor) {
        vec3 v;
        uint32 len;
        v.x = parse_float(cursor, *len) as float32;
        cursor += len + 1;
        v.y = parse_float(cursor, *len) as float32;
        cursor += len + 1;
        v.z = parse_float(cursor) as float32;
        return v;
    }

    vec2 parse_vec2(char* cursor) {
        vec2 v;
        uint32 len;
        v.x = parse_float(cursor, *len) as float32;
        cursor += len + 1;
        v.y = parse_float(cursor) as float32;
        return v;
    }

    OBJ_VertexIndices parse_indices(char** cursorp) {
        OBJ_VertexIndices ind = {};
        uint32 len = 0;

        ind.pos = parse_int(@cursorp, *len) as uint32 - 1;
        @cursorp += len;
        if @(@cursorp) != '/' return ind;
        @cursorp += 1; // skip '/'

        ind.text_coord = parse_int(@cursorp, *len) as uint32 - 1;
        @cursorp += len;
        if @(@cursorp) != '/' return ind;
        @cursorp += 1; // skip '/'

        ind.normal = parse_int(@cursorp, *len) as uint32 - 1;
        @cursorp += len;

        return ind;
    }

    char* cursor = source;
    while @cursor {
        let line = substr_until(cursor, '\n');
        switch line.chars[0] {

            case '#': break;

            case 'g':
            case 'o': {
                OBJ_Object o = {};
                o.group_type = line.chars[0];

                line.chars += 2;
                line.length -= 3;

                o.name = alloc_string_copy(line);
                o.indices_start = list_length(obj.indices);
                list_add(*obj.objects, *o);
            } break;

            case 'v': switch line.chars[1] {
                case ' ': {
                    line.chars += 2;
                    let v = parse_vec3(line.chars);
                    list_add(*obj.vertices, *v);

                    // TODO: some .obj files support vertex colors at the end of 'v', consider supporting this

                } break;
                case 't': {
                    line.chars += 3;
                    let vt = parse_vec2(line.chars);
                    list_add(*obj.texture_coords, *vt);
                } break;
                case 'n': {
                    line.chars += 3;
                    let vn = parse_vec3(line.chars);
                    list_add(*obj.normals, *vn);
                } break;
                default: break;
            } break;

            case 'f': {
                line.chars += 2; // skip 'f '

                let i = parse_indices(*line.chars);
                list_add(*obj.indices, *i);

                line.chars += 1;
                i = parse_indices(*line.chars);
                list_add(*obj.indices, *i);

                line.chars += 1;
                i = parse_indices(*line.chars);
                list_add(*obj.indices, *i);
            } break;

            default: {
            } break;
        }
        cursor += line.length;
    }

    free(source);


    for 0 .. list_length(obj.objects) - 1 {
        obj.objects[it].indices_length = obj.objects[it + 1].indices_start - obj.objects[it].indices_start;
    }

    uint32 index = list_length(obj.objects) - 1;
    obj.objects[index].indices_length = list_length(obj.indices) - obj.objects[index].indices_start;

    print("[INFO]: Loaded obj \"", obj.file_name.chars, "\" with groups:\n");
    for 0 .. list_length(obj.objects) {
        print("    ", obj.objects[it].group_type, " ", obj.objects[it].name.chars, " [", obj.objects[it].indices_start, " .. ", obj.objects[it].indices_length, "]", "\n");
    }

    return obj;
}

vertex3D make_vert(OBJ_Data obj, OBJ_VertexIndices ind) {
    vertex3D v = {};
    v.pos    = obj.vertices[ind.pos];
    v.normal = obj.normals[ind.normal];
    if ind.text_coord != (-1 as uint32) v.uv = obj.texture_coords[ind.text_coord];
    return v;
}


Mesh obj_to_mesh(OBJ_Data obj) return obj_to_mesh(obj, list_length(obj.indices), 0);
Mesh obj_to_mesh(OBJ_Data obj, uint32 ind_len, index_offset) {
    Mesh mesh = mesh_create();

    uint32 vlen = list_length(obj.vertices);
    uint32 tlen = list_length(obj.texture_coords);
    uint32 nlen = list_length(obj.normals);

    struct entry {
        OBJ_VertexIndices key;
        uint32 item;
    }

    // TODO: we need to handle hash collisions
    uint64 index_lookup_size = ind_len * sizeof entry;
    entry* index_lookup = malloc(index_lookup_size);
    memset(index_lookup, 0, index_lookup_size);
    uint32 collision_count = 0;

    uint64 obj_index_hash(OBJ_VertexIndices i) { return i.pos as uint64 | (i.normal as uint64 << 32) ^ (i.text_coord as uint64 << 16); }
    bool obj_index_equals(OBJ_VertexIndices a, b) { return a.pos == b.pos and a.text_coord == b.text_coord and a.normal == b.normal; }

    for uint32 i : 0 .. ind_len {
        let a = obj.indices[i + index_offset];

        let hash = obj_index_hash(a) % ind_len;
        let e = index_lookup[hash];
        if e.item {
            if obj_index_equals(a, e.key) {
                add_ind(*mesh, e.item - 1);
                continue;
            }

            collision_count++;
        }

        uint32 ind = list_length(mesh.vertices);
        add_ind(*mesh, ind);
        index_lookup[hash] = { a, ind + 1 };

        vertex3D v = make_vert(obj, a);
        add_vert(*mesh, v);
    }

    free(index_lookup);

    uint32 v_count = list_length(mesh.vertices);
    print("[INFO]: obj file \"", obj.file_name.chars, "\" converted to mesh with ", v_count, " vertices.\n");
    print("    There were ", collision_count, " collisions\n");

    return mesh;
}

Mesh obj_to_flatshaded_mesh(OBJ_Data obj) {
    Mesh mesh = mesh_create();
    uint32 ind_len = list_length(obj.indices);

    for uint32 it: 0 .. ind_len {
        add_ind(*mesh, it);
        add_vert(*mesh, make_vert(obj, obj.indices[it]));
    }

    return mesh;
}