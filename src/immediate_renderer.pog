

Shader immediate_shader;
DrawBuffers immediate_buffer;

Texture2D text_atlas;

vertex2D* immediate_vertices; // list
uint32* immediate_indices; // list


void dispatch_immediate() {
    let vert_count = list_length(immediate_vertices);
    let ind_count = list_length(immediate_indices);


    if vert_count != 0 {
        update_buffers(*immediate_buffer, immediate_vertices, vert_count, immediate_indices, ind_count);
        bind(text_atlas);
        use(*immediate_shader);
        enable_alpha_blending();
        disable_depth_test();
        draw_elements(immediate_buffer);
        enable_depth_test();
    }

    list_clear(immediate_vertices);
    list_clear(immediate_indices);
}

void immediate_vertex(float32 x, float32 y, float32 u, float32 v) {
    immediate_vertex(x, y, u, v, White);
}

void immediate_vertex(float32 x, float32 y, float32 u, float32 v, Color color) {
    vertex2D vert;
    vert.pos = {x, y};
    vert.uv = {u, v};
    vert.color = color;
    list_add(*immediate_vertices, *vert);
}


void immediate_triangle(uint32 i1, uint32 i2, uint32 i3) {

    let base = list_length(immediate_vertices);
    i1 += base;
    i2 += base;
    i3 += base;
    list_add(*immediate_indices, *i1);
    list_add(*immediate_indices, *i2);
    list_add(*immediate_indices, *i3);
}

void draw_rect(vec2 pos, vec2 size) {

    let sx = size.x * 0.5;
    let sy = size.y * 0.5;

    immediate_triangle(0, 1, 2);
    immediate_triangle(1, 3, 2);

    immediate_vertex(pos.x + -sx, pos.y + -sy,  0, 0);
    immediate_vertex(pos.x +  sx, pos.y + -sy,  1, 0);
    immediate_vertex(pos.x + -sx, pos.y +  sy,  0, 1);
    immediate_vertex(pos.x +  sx, pos.y +  sy,  1, 1);
}


void draw_image(Texture2D* image) {

}

void draw_char(vec2 pos, float32 size, char c, Color color) {

    const hor_frac = 1.0 / 14.0;
    const ver_frac = 1.0 / 7.0;

    uint32 b = c as uint8 - ' ';
    float32 col = b % 14;
    float32 row = b / 14 + 1;

    // print("col, row = ", col, ", ", row, "\n");

    float32 u = col / 14.0;
    float32 v = row / 7.0;
    v = 1 - v;

    let sx = size * 0.5 * 0.5;
    let sy = size * 0.5;

    immediate_triangle(0, 1, 2);
    immediate_triangle(1, 3, 2);

    immediate_vertex(pos.x + -sx, pos.y + -sy, u, v, color);
    immediate_vertex(pos.x +  sx, pos.y + -sy, u + hor_frac, v, color);
    immediate_vertex(pos.x + -sx, pos.y +  sy, u, v + ver_frac, color);
    immediate_vertex(pos.x +  sx, pos.y +  sy, u + hor_frac, v + ver_frac, color);

}

vec2 draw_text(vec2 pos, float32 size, string text, Color color) {
    float32 start = pos.x;

    for i : 0 .. text.length {
        char c = text.chars[i];

        if c == '\n' {
            pos.x = start;
            pos.y -= size;
            continue;
        }

        if c != ' ' draw_char(pos, size, c, color);
        pos.x += size * 0.5;
    }

    return pos;
}

vec2 draw_text_backwards(vec2 pos, float32 size, string text, Color color) {
    int32 i = text.length as int32 - 1;
    while i >= 0 {
        let c = text.chars[i--];

        if c != ' ' draw_char(pos, size, c, color);
        pos.x -= size * 0.5;
    }

    return pos;
}

vec2 draw_text(vec2 pos, float32 size, char* text, Color color) {

    float32 start = pos.x;

    while @text {
        switch @text {
            case '\n':
                pos.x = start;
                pos.y -= size;
                break;
            default:
                draw_char(pos, size, @text, color);
            case ' ':
                pos.x += size * 0.5;
                break;
        }
        text++;
    }

    return pos;
}

