

VertexAttributeType[] vertex3D_attribs = { .vec3, .vec3, .vec2 };
struct vertex3D {
    vec3 pos;
    vec3 normal;
    vec2 uv;
}

VertexAttributeType[] vertex2D_attribs = { .vec2, .vec2, .color };
struct vertex2D {
    vec2 pos;
    vec2 uv;
    Color color;
}

struct Mesh {
    vertex3D* vertices;
    uint32* indices;
    uint32 vertices_count;
    uint32 indices_count;

    vec3 bb_min, bb_max;
}

struct DrawBuffers {
    uint32 vao, vbo, ebo;
    int32 elements_count;
}

enum VertexAttributeType {
    vec2; vec3; vec4;
    color; float32;
}

struct VertexAttributeInfo {
    GLenum _type;
    int32 count;
    uint32 bytesize;
    bool normalized;
}

VertexAttributeInfo get_vertex_attribute_info(VertexAttributeType datatype) {
    switch datatype {
        case .float32: return { _type = GL_FLOAT,         count = 1, bytesize = 4,  normalized = false };
        case .vec2:    return { _type = GL_FLOAT,         count = 2, bytesize = 8,  normalized = false };
        case .vec3:    return { _type = GL_FLOAT,         count = 3, bytesize = 12, normalized = false };
        case .vec4:    return { _type = GL_FLOAT,         count = 4, bytesize = 16, normalized = false };
        case .color:   return { _type = GL_UNSIGNED_BYTE, count = 4, bytesize = 4,  normalized = true  };
    }

    return {};
}

uint32 set_vertex_attribute_pointer(uint32 index, VertexAttributeType datatype, int32 stride, uint32 offset) {
    let info = get_vertex_attribute_info(datatype);

    glEnableVertexAttribArray(index);
    glVertexAttribPointer(index, info.count, info._type, info.normalized, stride, offset);

    return info.bytesize;
}

void init_vertex_layout(int32 stride, VertexAttributeType[] attribs) {
    uint32 offset = 0;
    for uint32 index : 0 .. attribs.length {
        offset += set_vertex_attribute_pointer(index, attribs[index], stride, offset);
    }
}


DrawBuffers create_draw_buffers(Mesh mesh) {
    return create_draw_buffers(sizeof vertex3D, vertex3D_attribs,
                                mesh.vertices_count * sizeof vertex3D, mesh.vertices,
                                mesh.indices_count, mesh.indices);
}

DrawBuffers create_draw_buffers(int32 vertex_size, VertexAttributeType[] attribs) return create_draw_buffers(vertex_size, attribs, 0, null, 0, null);

DrawBuffers create_draw_buffers(int32 vertex_size, VertexAttributeType[] attribs,
                                uint32 vbo_bytes, void* vbo_data,
                                uint32 elements_count, uint32* ebo_data) // TODO: glBufferData hint should be an argument here
{
    DrawBuffers db = {};
    db.elements_count = elements_count;

    glGenVertexArrays(1, *db.vao);
    glBindVertexArray(db.vao);

    glGenBuffers(1, *db.vbo);
    glBindBuffer(GL_ARRAY_BUFFER , db.vbo);
    glGenBuffers(1, *db.ebo);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, db.ebo);

    if vbo_data glBufferData(GL_ARRAY_BUFFER, vbo_bytes, vbo_data, GL_STATIC_DRAW);
    if ebo_data glBufferData(GL_ELEMENT_ARRAY_BUFFER, elements_count * sizeof uint32, ebo_data, GL_STATIC_DRAW);

    init_vertex_layout(vertex_size, attribs);

    glBindVertexArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    return db;
}

void update_buffers(with DrawBuffers* db, vertex2D[] vertices, uint32[] indices) { update_buffers(db, vertices.data, vertices.length, indices.data, indices.length); }
void update_buffers(with DrawBuffers* db, vertex2D* vertices, uint32 vertices_count, uint32* indices, uint32 indices_count) {
    db.elements_count = indices_count as int32;
    update_buffer(db.vbo, vertices_count * sizeof vertex2D, vertices);
    update_buffer(db.ebo, indices_count * sizeof uint32, indices);
}

void update_vertices(with DrawBuffers* db, uint32 vbo_bytes, void* vertices) update_buffer(db.vbo, vbo_bytes, vertices);

void update_indices(with DrawBuffers* db, uint32[] indices) update_indices(db, indices.length, indices.data);
void update_indices(with DrawBuffers* db, uint32 count, uint32* indices) {
    db.elements_count = count;
    update_buffer(db.ebo, count * sizeof uint32, indices);
}

void draw_elements(with DrawBuffers db) {
    glBindVertexArray(db.vao);
    glDrawElements(GL_TRIANGLES, db.elements_count, GL_UNSIGNED_INT, null);
    glBindVertexArray(0);
}

void draw_elements(with DrawBuffers db, uint32 instanceCount) {
    glBindVertexArray(db.vao);
    glDrawElementsInstanced(GL_TRIANGLES, db.elements_count, GL_UNSIGNED_INT, null, instanceCount);
    glBindVertexArray(0);
}

void draw_elements_lines(with DrawBuffers db) {
    glBindVertexArray(db.vao);
    glDrawElements(GL_LINES, db.elements_count, GL_UNSIGNED_INT, null);
    glBindVertexArray(0);
}



void update_buffer(uint32 buffer, uint32 size, void* data) {
    glBindBuffer(GL_ARRAY_BUFFER, buffer);
    glBufferData(GL_ARRAY_BUFFER, size, data, GL_STATIC_DRAW);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
}




void calc_bounds(Mesh* mesh) {
    vec3 bb_min = mesh.vertices[0].pos;
    vec3 bb_max = mesh.vertices[0].pos;

    for 1 .. mesh.vertices_count {
        let v = mesh.vertices[it];
        bb_min = min(bb_min, v.pos);
        bb_max = max(bb_max, v.pos);
    }

    mesh.bb_min = bb_min;
    mesh.bb_max = bb_max;
}

void gen_normals(Mesh mesh) {
    // set normals to zero
    for 0 .. mesh.vertices_count  mesh.vertices[it].normal = {0, 0, 0};

    // add every triangles contribution to every vertex normal
    uint32 i = 0; // TODO: we really need to add traditional for loops
    while i < mesh.indices_count {
        uint32 i0 = mesh.indices[i];
        uint32 i1 = mesh.indices[i + 1];
        uint32 i2 = mesh.indices[i + 2];

        vec3 v0 = mesh.vertices[i0].pos;
        vec3 v1 = mesh.vertices[i1].pos;
        vec3 v2 = mesh.vertices[i2].pos;

        vec3 normal = cross(sub(v0, v2), sub(v1, v2));

        // TODO: += operator overload would make this significantly neater
        mesh.vertices[i0].normal = add(mesh.vertices[i0].normal, normal);
        mesh.vertices[i1].normal = add(mesh.vertices[i1].normal, normal);
        mesh.vertices[i2].normal = add(mesh.vertices[i2].normal, normal);

        i += 3;
    }

    // normalize normals
    for 0 .. mesh.vertices_count  mesh.vertices[it].normal = normalize(mesh.vertices[it].normal);
}

void flip_indices(Mesh mesh) { flip_indices(mesh, 0, mesh.indices_count); }
void flip_indices(Mesh mesh, uint32 base, uint32 len) {
    uint32 i = 0; // TODO: we really need to add traditional for loops
    while i < len {
        let t = mesh.indices[base + i];
        mesh.indices[base + i] = mesh.indices[base + i + 2];
        mesh.indices[base + i + 2] = t;
        i += 3;
    }

    // for uint32 i = 0, i < len, i += 3 {}
}

Mesh gen_plane(uint32 size) { return gen_plane(size, 1.0, 1.0); }
Mesh gen_plane(uint32 size, float32 uv_scale, scale) {
    let vsize = size + 1;

    float32 half_size = size as float32 / 2;

    Mesh mesh = {};
    mesh.vertices_count = vsize*vsize;
    mesh.vertices = malloc(mesh.vertices_count * sizeof vertex3D);
    mesh.indices_count = size*size * 2 * 3;
    mesh.indices = malloc(mesh.indices_count * sizeof uint32);

    uint32 i = 0;

    for uint32 xi: 0 .. vsize {
        for uint32 yi: 0 .. vsize {
            uint32 vi = xi * vsize + yi;
            mesh.vertices[vi] = {
                pos = { (xi - half_size) * scale, 0, (yi - half_size) * scale },
                normal = vec3_unit_y,
                uv = { xi as float32 / size * uv_scale, yi as float32 / size * uv_scale }
            };

            if xi < size and yi < size {
                mesh.indices[i++] = vi;
                mesh.indices[i++] = vi + 1;
                mesh.indices[i++] = vi + vsize + 1;

                mesh.indices[i++] = vi;
                mesh.indices[i++] = vi + vsize + 1;
                mesh.indices[i++] = vi + vsize;
            }
        }
    }

    return mesh;
}