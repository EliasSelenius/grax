
/*
    Grax library will concern itself with
        - OpenGL boilerplate
        - immediate rendering
            - draw basic 2D shapes
            - draw text
            - draw images/sprites
        - loading of assets: textures and models


    TODO:
    - rect rendering
*/


GLFWwindow* main_window;
float32 main_window_width = 1600;
float32 main_window_height = 900;
float32 main_window_aspect;


vec2 window_size() {
    int32 w;
    int32 h;
    glfwGetWindowSize(main_window, *w, *h);
    return {w, h} as vec2;
}


int32 grax_loop() {

    dispatch_immediate();

    glfwSwapBuffers(main_window);
    glfwPollEvents();

    if glfwWindowShouldClose(main_window) {
        glfwDestroyWindow(main_window);
        glfwTerminate();
        return false;
    }

    glClear(GL_COLOR_BUFFER_BIT);
    return true;
}

void grax_init() {

    if !glfwInit() {
        print("ERROR: failed to initilize glfw.\n");
        return;
    }

    main_window = glfwCreateWindow(main_window_width as int32, main_window_height as int32, "Grax", null, null);
    main_window_aspect = main_window_height / main_window_width;
    if !main_window {
        glfwTerminate();
        print("ERROR: failed to initilize main_window.\n");
        return;
    }

    glfwMakeContextCurrent(main_window);

    // glfw callbacks
    glfwSetFramebufferSizeCallback(main_window, on_resize);

    load_opengl(glfwGetProcAddress);

    glEnable(GL_DEBUG_OUTPUT);
    glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);
    glDebugMessageCallback(opengl_debug_callback, null);

    glEnable(GL_BLEND);
    glBlendEquation(GL_FUNC_ADD);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    glClearColor(0.1, 0.1, 0.1, 1.0);

    {
        immediate_vertices = list_create((sizeof vertex2D) as uint32);
        immediate_indices  = list_create((sizeof uint32) as uint32);
        immediate_buffer = create_draw_buffers();
    }

    {
        // TODO: the "../grax/" here is a hack!
        immediate_shader = load_shader("../grax/shaders/frag.glsl", "../grax/shaders/vert.glsl");
    }

    // TODO: the "../grax/" here is a hack!
    let image = load_bitmap("../grax/CascadiaMono.bmp");
    text_atlas = create_texture2D(image);
    free(image.pixels); // TODO: consider different free api, like free_image()
}

void on_resize(GLFWwindow* window, int32 w, int32 h) {

    main_window_width = w as float32;
    main_window_height = h as float32;
    main_window_aspect = main_window_height / main_window_width;

    print("Main Window Resize:\n    width = ", main_window_width, "\n    height = ", main_window_height, "\n    aspect = ", main_window_aspect, "\n");

    let aspect_loc = glGetUniformLocation(immediate_shader.gl_handle, "aspect");
    glUniform1f(aspect_loc, main_window_aspect);

    glViewport(0, 0, w, h);
}

void opengl_debug_callback(GLenum source, GLenum _type, GLuint id, GLenum severity, GLsizei length, /*const*/ GLchar* message, /*const*/ void* userParam) {

    switch (_type) {
        case GL_DEBUG_TYPE_ERROR: print("ERROR: "); break;
        case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: print("DEPRECATED BEHAVIOR: "); break;
        case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: print("UDEFINED BEHAVIOR: "); break;
        case GL_DEBUG_TYPE_PORTABILITY: print("PORTABILITY: "); break;
        case GL_DEBUG_TYPE_PERFORMANCE: print("PERFORMANCE: "); break;
        case GL_DEBUG_TYPE_OTHER: return; // print("OTHER: "); break;
        case GL_DEBUG_TYPE_MARKER: print("MARKER: "); break;
    }

    print(message, "\n");
}

GLFWmonitor* get_ideal_monitor(GLFWwindow* window) {

    int32 x;
    int32 y;
    int32 w;
    int32 h;
    glfwGetWindowPos(window, *x, *y);
    glfwGetWindowSize(window, *w, *h);

    int32 monitor_count;
    GLFWmonitor** monitors = glfwGetMonitors(*monitor_count);

    int32 ideal = 0;
    int32 highest_area = 0;
    for i : 0 .. monitor_count {
        GLFWmonitor* m = monitors[i];

        int32 mX;
        int32 mY;
        glfwGetMonitorPos(m, *mX, *mY);
        GLFWvidmode* mode = glfwGetVideoMode(m);

        int32 area = max(0, min(x + w, mX + mode.width ) - max(x, mX))
                   * max(0, min(y + h, mY + mode.height) - max(y, mY));

        if area > highest_area {
            highest_area = area;
            ideal = i;
        }
    }

    return monitors[ideal];
}

void toggle_fullscreen(GLFWwindow* window) {
    GLFWmonitor* monitor = glfwGetWindowMonitor(window);
    if (monitor) {
        // set to windowed
        int32 mX;
        int32 mY;
        glfwGetMonitorPos(monitor, *mX, *mY);
        // TODO: calc better values here instead of +60, for example we could center the window, or remember its last position
        glfwSetWindowMonitor(window, null, mX + 60, mY + 60, 1600, 900, 0);

    } else {
        // set to fullscreen
        GLFWmonitor* m = get_ideal_monitor(window);
        GLFWvidmode* mode = glfwGetVideoMode(m);
        glfwSetWindowMonitor(window, m, 0, 0, mode.width, mode.height, mode.refreshRate);
    }
}


struct Framebuffer {
    uint32 width, height;
    uint32 gl_handle;
}

struct Texture2D {
    uint32 width, height;
    uint32 gl_handle;
}

struct Color {
    uint8 r, g, b, a;
}

Color rgba(uint32 i) {
    Color c;
    // c.r = (i >> 24) & 0xFF;
    // c.g = (i >> 16) & 0xFF;
    // c.b = (i >> 8 ) & 0xFF;
    // c.a = (i >> 0 ) & 0xFF;

    uint8* b = *i as uint8*;
    c.r = b[3];
    c.g = b[2];
    c.b = b[1];
    c.a = b[0];

    return c;
}

const White  = {255, 255, 255, 255} as Color;
const Gray   = {128, 128, 128, 255} as Color;
const Black  = {0,   0,   0,   255} as Color;
const Red    = {255, 0,   0,   255} as Color;
const Green  = {0,   255, 0,   255} as Color;
const Blue   = {0,   0,   255, 255} as Color;
const Yellow = {255, 255, 0,   255} as Color;
const Cyan   = {0,   255, 255, 255} as Color;
const Purple = {255, 0,   255, 255} as Color;

struct ColorRgb {
    uint8 r, g, b;
}


Texture2D create_texture2D(Image image) {
    Texture2D tex;
    tex.width = image.width;
    tex.height = image.height;
    glGenTextures(1, *tex.gl_handle);
    glBindTexture(GL_TEXTURE_2D, tex.gl_handle);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);


    const filter = GL_LINEAR; // GL_NEAREST
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, filter);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, filter);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.width, image.height, 0, GL_RGBA, GL_UNSIGNED_BYTE, image.pixels);
    glGenerateMipmap(GL_TEXTURE_2D);

    glBindTexture(GL_TEXTURE_2D, 0);
    return tex;
}

void bind(with Texture2D tex) {
    glBindTexture(GL_TEXTURE_2D, tex.gl_handle);
}

// TODO: filter should be an enum
void set_filter(with Texture2D tex, uint32 filter) {
    bind(tex);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, filter);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, filter);
    glBindTexture(GL_TEXTURE_2D, 0);
}
