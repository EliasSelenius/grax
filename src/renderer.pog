

Shader default3d_shader;
Shader default2d_shader;

Shader ui_shader;

UBO* camera_ubo;
UBO* application_ubo;

Texture2D white_texture;
Texture2D CascadiaMono_texture;



Application app = {
    window_width = 1600,
    window_height = 900,
    // sim_delta = 1.0 / 60.0,
    // sim_speed = 1.0

    profiler_graph = false
};

struct Application {
    GLFWwindow* main_window;
    uint32 window_width, window_height;
    float32 width_over_height;
    float32 height_over_width;
    float32 window_margin;

    vec2 top_left;
    vec2 top_right;
    vec2 bottom_left;
    vec2 bottom_right;

    uint32 refresh_rate;

    // measured:
    float64 total_run_time;
    float64 frame_time;

    // float64 sim_time;
    // float32 sim_delta;
    // float32 sim_speed;

    bool profiler_graph;

    void(AppEvent, AppEventData) on_event;
}

float32 deltatime() {
    // const target_frame_time = 1.0 / 60.0; // TODO: this assumes there is a 60Hz refresh rate, and that vsync is turned on
    // const threshold = 0.001;
    // return clamp(app.frame_time as float32, target_frame_time - threshold, target_frame_time + threshold);

    return app.frame_time as float32;
}

void app_update_size(uint32 w, h) {
    app.window_width = w;
    app.window_height = h;

    app.width_over_height = w as float32 / h as float32;
    app.height_over_width = h as float32 / w as float32;

    app.window_margin = app.width_over_height - 1.0;

    let m = app.window_margin;
    app.top_left     = { -1 - m,  1 };
    app.top_right    = {  1 + m,  1 };
    app.bottom_left  = { -1 - m, -1 };
    app.bottom_right = {  1 + m, -1 };
}

vec2 window_size() {
    int32 w;
    int32 h;
    glfwGetWindowSize(app.main_window, *w, *h);
    return {w, h} as vec2;
}

bool grax_loop() {

    dispatch_immediate();

    glfwSwapBuffers(app.main_window);
    input_state_reset();
    glfwPollEvents();

    if glfwWindowShouldClose(app.main_window) {
        glfwDestroyWindow(app.main_window);
        glfwTerminate();
        return false;
    }

    // begin next frame:

    input_update();

    let prev_time = app.total_run_time;
    app.total_run_time = glfwGetTime();
    app.frame_time = app.total_run_time - prev_time;

    if app.profiler_graph  measure_frametime();

    { // update application UBO
        struct AppData { float32 time, delta, width, height; }
        AppData data = {};
        data.time = app.total_run_time as float32;
        data.delta = app.frame_time as float32;
        data.width = app.window_width;
        data.height = app.window_height;
        update_buffer(application_ubo.buffer_id, sizeof AppData, *data);
    }

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    // glClear(GL_COLOR_BUFFER_BIT);
    return true;
}

void grax_init() {

    if !glfwInit() {
        print("[ERROR]: failed to initilize glfw.\n");
        return;
    }

    // glfwWindowHint(GLFW_DECORATED, GLFW_FALSE);

    // glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    // glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    // glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    app.main_window = glfwCreateWindow(app.window_width as int32, app.window_height as int32, "Grax", null, null);
    app_update_size(app.window_width, app.window_height);

    if !app.main_window {
        glfwTerminate();
        print("[ERROR]: failed to initilize app.main_window.\n");
        return;
    }

    glfwMakeContextCurrent(app.main_window);
    glfwSwapInterval(1);

    register_glfw_callbacks(app.main_window);

    load_opengl(glfwGetProcAddress);
    print("[INFO]: OpenGL version: ", glGetString(GL_VERSION) as char*, "\n");

    if true {
        glEnable(GL_DEBUG_OUTPUT);
        glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);
        glDebugMessageCallback(opengl_debug_callback, null);
        print("[INFO]: OpenGL synchronous debug messages enabled.\n");
    }

    enable_alpha_blending();
    enable_depth_test();
    glEnable(GL_CULL_FACE);
    // glClearColor(0.1, 0.1, 0.1, 1.0);
    glClearColor(0, 0, 0, 0);

    camera_ubo = get_ubo("Camera");
    application_ubo = get_ubo("Application");


    { // load assets:
        // TODO: the "../grax/" here is a hack!

        default3d_shader = load_shader("../grax/shaders/default3d.glsl");
        default2d_shader = load_shader("../grax/shaders/default2d.glsl");

        gizmo_points_shader = load_shader("../grax/shaders/gizmo_points3D.glsl");

        ui_shader = load_shader("../grax/shaders/ui.glsl");
        CascadiaMono_texture = load_texture2D("../grax/CascadiaMono.bmp");
        set_filter(CascadiaMono_texture, TextureFilter.linear);
        // = load_texture2D("../grax/tinyfont.bmp");
    }

    { // init white texture
        Color pixel = { 255, 255, 255, 255 };
        Image image = { width = 1, height = 1, pixels = *pixel };
        white_texture = create_texture2D(image);
    }

    init_immediate_renderer();
}


void opengl_debug_callback(GLenum source, GLenum _type, GLuint id, GLenum severity, GLsizei length, /*const*/ GLchar* message, /*const*/ void* userParam) {

    /* for reference:
        glDebugMessageInsert() - to generate custom debug messages
        glDebugMessageControl() - to filter out debug messages

        to scope messages: https://www.khronos.org/opengl/wiki/Debug_Output#Scoping_messages
        glPushDebugGroup()
        glPopDebugGroup()

        glObjectLabel() - to give each opengl object a string name that will be used by the debug messages

        messages are uniquely identified by: source, type, and id
    */

    char* get_debug_type_string(GLenum t) {
        switch t {
            case GL_DEBUG_TYPE_ERROR:               return "ERROR";               // An error, typically from the API
            case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: return "DEPRECATED_BEHAVIOR"; // Some behavior marked deprecated has been used
            case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:  return "UNDEFINED_BEHAVIOR";  // Something has invoked undefined behavior
            case GL_DEBUG_TYPE_PORTABILITY:         return "PORTABILITY";         // Some functionality the user relies upon is not portable
            case GL_DEBUG_TYPE_PERFORMANCE:         return "PERFORMANCE";         // Code has triggered possible performance issues
            case GL_DEBUG_TYPE_MARKER:              return "MARKER";              // Command stream annotation
            case GL_DEBUG_TYPE_OTHER:               return "OTHER";               // Some type that isn't one of these
            case GL_DEBUG_TYPE_PUSH_GROUP:          return "PUSH_GROUP";
            case GL_DEBUG_TYPE_POP_GROUP:           return "POP_GROUP";
        }

        return null;
    }

    char* get_debug_source(GLenum src) {
        switch src {
            case GL_DEBUG_SOURCE_API:             return "API";             // Calls to the OpenGL API
            case GL_DEBUG_SOURCE_WINDOW_SYSTEM:   return "WINDOW_SYSTEM";   // Calls to a window-system API
            case GL_DEBUG_SOURCE_SHADER_COMPILER: return "SHADER_COMPILER"; // A compiler for a shading language
            case GL_DEBUG_SOURCE_THIRD_PARTY:     return "THIRD_PARTY";     // An application associated with OpenGL
            case GL_DEBUG_SOURCE_APPLICATION:     return "APPLICATION";     // Generated by the user of this application
            case GL_DEBUG_SOURCE_OTHER:           return "OTHER";           // Some source that isn't one of these
        }

        return null;
    }

    char* get_debug_severity(GLenum sev) {
        switch sev {
            case GL_DEBUG_SEVERITY_HIGH:         return "HIGH";         // All OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior
            case GL_DEBUG_SEVERITY_MEDIUM:       return "MEDIUM";       // Major performance warnings, shader compilation/linking warnings, or the use of deprecated functionality
            case GL_DEBUG_SEVERITY_LOW:          return "LOW";          // Redundant state change performance warning, or unimportant undefined behavior
            case GL_DEBUG_SEVERITY_NOTIFICATION: return "NOTIFICATION"; // Anything that isn't an error or performance issue.
        }

        return null;
    }

    if _type == GL_DEBUG_TYPE_OTHER  return; // opengl has a tendency to spam some info we dont care about

    print("[opengl_debug_callback]: (msg_id: ", id, ") ", get_debug_source(source), " ", get_debug_type_string(_type), " (severity: ", get_debug_severity(severity), "): ", message, "\n");
}

void measure_frametime() {
    const sample_count = 60*3;
    static float32* samples = calloc(1, sample_count * sizeof float32);
    static uint32 sample_index = 0;

    samples[sample_index++ % sample_count] = app.frame_time as float32;

    float32 dt_min = 99999999999999999999.0;
    float32 dt_max = 0;
    float32 dt_avg = 0;

    for 0 .. sample_count {
        let dt = samples[it];
        dt_min = min(dt_min, dt);
        dt_max = max(dt_max, dt);
        dt_avg += dt;
    }

    dt_avg /= sample_count;

    float32 column_width = 2.0 / sample_count;
    for 0 .. sample_count {
        let dt = samples[it];
        vec2 size = { column_width, dt / (3.0*dt_avg) };
        vec2 pos = make_vec(column_width/2 + size.x * it - 1, size.y/2.0 - 1);
        draw_rect(pos, size, opacity(White, 0.3));
    }

    void draw_line(float32 dt, dt_avg, Color color) {
        let micro_sec = round(dt * 1000_000) as uint64;
        vec2 size = { 2, 0.005 };
        vec2 pos  = { 0, dt / (3.0*dt_avg) - 1 };
        draw_rect(pos, size, color);
        const text_height = 0.05;
        draw_text(pos + make_vec(1 + text_height/2.0, 0), text_height, to_string(micro_sec), color);
    }

    draw_line(dt_max, dt_avg, Red);
    draw_line(dt_min, dt_avg, Blue);
    draw_line(dt_avg, dt_avg, Green);
    // draw_line(app.frame_time as float32, dt_avg, Yellow);
}

struct GLFW_MonitorInfo {
    char* name;
    ivec2 pos;
    vec2 content_scale;
    ivec2 physical_size;
    GLFWvidmode* current_video_mode;
    GLFWvidmode[] video_modes;
}

GLFW_MonitorInfo get_monitor_info(GLFWmonitor* monitor) {
    GLFW_MonitorInfo info = {};

    info.name = glfwGetMonitorName(monitor);

    glfwGetMonitorPos(monitor, *info.pos.x, *info.pos.y);
    glfwGetMonitorContentScale(monitor, *info.content_scale.x, *info.content_scale.y);
    glfwGetMonitorPhysicalSize(monitor, *info.physical_size.x, *info.physical_size.y);

    info.current_video_mode = glfwGetVideoMode(monitor);
    info.video_modes.data = glfwGetVideoModes(monitor, *info.video_modes.length);

    return info;
}

GLFWmonitor* get_ideal_monitor(GLFWwindow* window) {

    int32 x;
    int32 y;
    int32 w;
    int32 h;
    glfwGetWindowPos(window, *x, *y);
    glfwGetWindowSize(window, *w, *h);

    int32 monitor_count;
    GLFWmonitor** monitors = glfwGetMonitors(*monitor_count);

    int32 ideal = 0;
    int32 highest_area = 0;
    for i : 0 .. monitor_count {
        GLFWmonitor* m = monitors[i];

        int32 mX;
        int32 mY;
        glfwGetMonitorPos(m, *mX, *mY);
        GLFWvidmode* mode = glfwGetVideoMode(m);

        int32 area = max(0, min(x + w, mX + mode.width ) - max(x, mX))
                   * max(0, min(y + h, mY + mode.height) - max(y, mY));

        if area > highest_area {
            highest_area = area;
            ideal = i;
        }
    }

    return monitors[ideal];
}

void toggle_fullscreen(GLFWwindow* window) {
    GLFWmonitor* monitor = glfwGetWindowMonitor(window);
    if (monitor) {
        // set to windowed
        int32 mX;
        int32 mY;
        glfwGetMonitorPos(monitor, *mX, *mY);
        // TODO: calc better values here instead of +60, for example we could center the window, or remember its last position
        glfwSetWindowMonitor(window, null, mX + 60, mY + 60, 1600, 900, 0);

    } else {
        // set to fullscreen
        GLFWmonitor* ideal_monitor = get_ideal_monitor(window);
        GLFWvidmode* mode = glfwGetVideoMode(ideal_monitor);

        print("[INFO]: Set video mode: ", mode.width, "x", mode.height, "@", mode.refreshRate, "\n");

        glfwSetWindowMonitor(window, ideal_monitor, 0, 0, mode.width, mode.height, mode.refreshRate);

        glfwSwapInterval(1); // for some reason seting the window monitor seems to disable the swap interval
    }
}


enum OpenGLBlendingMode {
    disabled; src_alpha; additive;
}

void set_blend_mode(OpenGLBlendingMode mode) {
    switch mode {
        case .disabled:  disable_blending(); break;
        case .src_alpha: enable_alpha_blending(); break;
        case .additive:  enable_additive_blending(); break;
    }
}

void enable_alpha_blending() {
    glEnable(GL_BLEND);
    glBlendEquation(GL_FUNC_ADD);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
}

void enable_additive_blending() {
    glEnable(GL_BLEND);
    glBlendEquation(GL_FUNC_ADD);
    glBlendFunc(GL_ONE, GL_ONE);
}

void disable_blending() { glDisable(GL_BLEND); }

void enable_depth_test() { glEnable(GL_DEPTH_TEST); }
void disable_depth_test() { glDisable(GL_DEPTH_TEST); }



void set_clear_color(float32 r, g, b, a) { glClearColor(r, g, b, a); }
void set_clear_color(Color color) { glClearColor(color.r / 255.0, color.g / 255.0, color.b / 255.0, color.a / 255.0); }
void set_clear_depth(float64 depth) { glClearDepth(depth); }

void clear_color() { glClear(GL_COLOR_BUFFER_BIT); }
void clear_color(float32 r, g, b, a) { set_clear_color(r, g, b, a); clear_color(); }
void clear_color(Color color) { set_clear_color(color); clear_color(); }

void clear_depth() { glClear(GL_DEPTH_BUFFER_BIT); }
void clear_depth(float64 depth) { set_clear_depth(depth); glClear(GL_DEPTH_BUFFER_BIT); }



enum AppEvent {
    key_press; key_release; key_repeat; text_input;
    resize; file_drop;
    lost_focus; gained_focus;
}

// TODO: this should be a union
struct AppEventData {
    int32 key, scancode, mods;
    uint32 unicode_codepoint;
    char*[] files;
}


void register_glfw_callbacks(GLFWwindow* window) {

    void glfw_error(int32 code, char* description) {}
    void glfw_windowpos(GLFWwindow* window, int32 x, y) {}
    void glfw_windowsize(GLFWwindow* window, int32 w, h) {}
    void glfw_windowclose(GLFWwindow* window) {}
    void glfw_windowrefresh(GLFWwindow* window) {}

    void glfw_windowfocus(GLFWwindow* window, int32 focused) {
        AppEventData data = {};
        if focused app.on_event(AppEvent.gained_focus, data);
        else       app.on_event(AppEvent.lost_focus,   data);
    }

    void glfw_windowiconify(GLFWwindow* window, int32 iconified) {}
    void glfw_windowmaximize(GLFWwindow* window, int32 maximized) {}

    void glfw_framebuffersize(GLFWwindow* window, int32 w, h) {
        if w == 0 or h == 0  return;
        app_update_size(w as uint32, h as uint32);
        print("[INFO]: Window resize: ", w, "x", h, "\n");
        glViewport(0, 0, w, h);
        AppEventData data = {};
        app.on_event(AppEvent.resize, data);
    }

    void glfw_windowcontentscale(GLFWwindow* window, float32 xscale, yscale) {}
    void glfw_mousebutton(GLFWwindow* window, int32 button, action, mods) {}
    void glfw_cursorpos(GLFWwindow* window, float64 x, y) {}
    void glfw_cursorenter(GLFWwindow* window, int32 entered) {}
    void glfw_scroll(GLFWwindow* window, float64 xoffset, yoffset) {
        mouse_scroll = yoffset;
        Input.mouse_scroll = yoffset as float32;
    }

    void glfw_key(GLFWwindow* window, int32 key, scancode, action, mods) {
        if (action == GLFW_PRESS and key == GLFW_KEY_F11 and mods == 0) toggle_fullscreen(app.main_window);
        AppEventData data = { key = key, scancode = scancode, mods = mods };
        switch action {
            case GLFW_PRESS:   app.on_event(AppEvent.key_press, data); if key == GLFW_KEY_F1  app.profiler_graph = !app.profiler_graph;  break;
            case GLFW_REPEAT:  app.on_event(AppEvent.key_repeat, data); break;
            case GLFW_RELEASE: app.on_event(AppEvent.key_release, data); break;
        }
    }

    void glfw_char(GLFWwindow* window, uint32 codepoint) {
        AppEventData data = { unicode_codepoint = codepoint };
        app.on_event(AppEvent.text_input, data);
    }

    void glfw_charmods(GLFWwindow* window, uint32 codepoint, int32 mods) {}

    void glfw_drop(GLFWwindow* window, int32 path_count, char** paths) {
        AppEventData data = {};
        data.files.data = paths;
        data.files.length = path_count as uint32;
        app.on_event(AppEvent.file_drop, data);
    }

    void glfw_monitor(GLFWmonitor* monitor, int32 event) {}
    void glfw_joystick(int32 jid, event) {}


    glfwSetErrorCallback              (        glfw_error);
    glfwSetWindowPosCallback          (window, glfw_windowpos);
    glfwSetWindowSizeCallback         (window, glfw_windowsize);
    glfwSetWindowCloseCallback        (window, glfw_windowclose);
    glfwSetWindowRefreshCallback      (window, glfw_windowrefresh);
    glfwSetWindowFocusCallback        (window, glfw_windowfocus);
    glfwSetWindowIconifyCallback      (window, glfw_windowiconify);
    glfwSetWindowMaximizeCallback     (window, glfw_windowmaximize);
    glfwSetFramebufferSizeCallback    (window, glfw_framebuffersize);
    glfwSetWindowContentScaleCallback (window, glfw_windowcontentscale);
    glfwSetMouseButtonCallback        (window, glfw_mousebutton);
    glfwSetCursorPosCallback          (window, glfw_cursorpos);
    glfwSetCursorEnterCallback        (window, glfw_cursorenter);
    glfwSetScrollCallback             (window, glfw_scroll);
    glfwSetKeyCallback                (window, glfw_key);
    glfwSetCharCallback               (window, glfw_char);
    glfwSetCharModsCallback           (window, glfw_charmods);
    glfwSetDropCallback               (window, glfw_drop);
    glfwSetMonitorCallback            (        glfw_monitor);
    glfwSetJoystickCallback           (        glfw_joystick);

    void null_event(AppEvent event, AppEventData data) {}
    if app.on_event == null  app.on_event = null_event;
}
