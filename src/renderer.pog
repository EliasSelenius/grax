
/*
    Grax library will concern itself with
        - OpenGL boilerplate
        - immediate rendering
            - draw basic 2D shapes
            - draw text
            - draw images/sprites
        - loading of assets: textures and models


    TODO:
    - shader program
    - rect rendering
*/

namespace Grax;

GLFWwindow* window;
Shader shader;


int32 key(char c) {
    return glfwGetKey(window, c as int32);
}

int32 key(int32 c) {
    return glfwGetKey(window, c);
}

const Left_Mouse = 0;
const Right_Mouse = 1;
int32 mouse(int32 btn) {
    return glfwGetMouseButton(window, btn);
}

int32 loop() {

    dispatch_immediate();

    glfwSwapBuffers(window);
    glfwPollEvents();

    if glfwWindowShouldClose(window) {
        glfwDestroyWindow(window);
        glfwTerminate();
        return false;
    }

    glClear(GL_COLOR_BUFFER_BIT);
    return true;
}

void on_resize(GLFWwindow* window, int32 w, int32 h) {
    print("resize: ", w, ", ", h, "\n");

    float32 aspect = h as float32 / w as float32;

    let aspect_loc = glGetUniformLocation(shader.gl_handle, "aspect");
    glUniform1f(aspect_loc, aspect);

    glViewport(0, 0, w, h);
}

void init() {

    if !glfwInit() {
        print("ERROR: failed to initilize glfw.\n");
        return;
    }

    window = glfwCreateWindow(1600, 900, "Grax", null, null);
    if !window {
        glfwTerminate();
        print("ERROR: failed to initilize window.\n");
        return;
    }

    glfwMakeContextCurrent(window);

    // glfw callbacks
    glfwSetFramebufferSizeCallback(window, on_resize);

    load_opengl(glfwGetProcAddress);

    glEnable(GL_DEBUG_OUTPUT);
    glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);
    glDebugMessageCallback(opengl_debug_callback, null);

    glEnable(GL_BLEND);
    glBlendEquation(GL_FUNC_ADD);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    glClearColor(0.1, 0.1, 0.1, 1.0);

    {
        immediate_vertices = list_create((sizeof vertex) as uint32);
        immediate_indices  = list_create((sizeof uint32) as uint32);
        immediate_buffer = create_draw_buffers();
    }

    {
        // TODO: the "../grax/" here is a hack!
        char* fragsrc = fileread("../grax/shaders/frag.glsl");
        char* vertsrc = fileread("../grax/shaders/vert.glsl");
        shader = create_shader(fragsrc, vertsrc);
        free(fragsrc);
        free(vertsrc);

        glUseProgram(shader.gl_handle);
    }

    // TODO: the "../grax/" here is a hack!
    let image = load_bitmap("../grax/CascadiaMono.bmp");
    let texture = create_texture2D(image);
    bind(texture);
}


void opengl_debug_callback(GLenum source, GLenum _type, GLuint id, GLenum severity, GLsizei length, /*const*/ GLchar* message, /*const*/ void* userParam) {

    switch (_type) {
        case GL_DEBUG_TYPE_ERROR: print("ERROR: "); break;
        case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: print("DEPRECATED BEHAVIOR: "); break;
        case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: print("UDEFINED BEHAVIOR: "); break;
        case GL_DEBUG_TYPE_PORTABILITY: print("PORTABILITY: "); break;
        case GL_DEBUG_TYPE_PERFORMANCE: print("PERFORMANCE: "); break;
        case GL_DEBUG_TYPE_OTHER: return; // spams terminal // print("OTHER: "); break;
        case GL_DEBUG_TYPE_MARKER: print("MARKER: "); break;
    }

    print(message, "\n");
}

struct Shader {
    uint32 gl_handle;
}

uint32 makeshader(uint32 program, GLenum _type, char* code) {
    uint32 s = glCreateShader(_type);
    glShaderSource(s, 1, *code, null); // null assumes null-terminated string
    glAttachShader(program, s);
    return s;
}

Shader create_shader(char* fragsrc, char* vertsrc) {
    uint32 program = glCreateProgram();
    let f = makeshader(program, GL_FRAGMENT_SHADER, fragsrc);
    let v = makeshader(program, GL_VERTEX_SHADER, vertsrc);

    glLinkProgram(program);

    glDetachShader(program, f);
    glDeleteShader(f);

    glDetachShader(program, v);
    glDeleteShader(v);

    GLsizei size = 1024;
    char buffer[size];
    glGetProgramInfoLog(program, size, *size, buffer);
    print(buffer as char*);

    Shader s;
    s.gl_handle = program;
    return s;
}

struct Framebuffer {
    uint32 width, height;
    uint32 gl_handle;
}

struct Texture2D {
    uint32 width, height;
    uint32 gl_handle;
}

struct Color {
    uint8 r, g, b, a;
}

Color rgba(uint32 i) {
    Color c;
    // c.r = (i >> 24) & 0xFF;
    // c.g = (i >> 16) & 0xFF;
    // c.b = (i >> 8 ) & 0xFF;
    // c.a = (i >> 0 ) & 0xFF;

    uint8* b = *i as uint8*;
    c.r = b[3];
    c.g = b[2];
    c.b = b[1];
    c.a = b[0];

    return c;
}

const White  = {255, 255, 255, 255} as Color;
const Gray   = {128, 128, 128, 255} as Color;
const Black  = {0,   0,   0,   255} as Color;
const Red    = {255, 0,   0,   255} as Color;
const Green  = {0,   255, 0,   255} as Color;
const Blue   = {0,   0,   255, 255} as Color;
const Yellow = {255, 255, 0,   255} as Color;
const Cyan   = {0,   255, 255, 255} as Color;
const Purple = {255, 0,   255, 255} as Color;

struct ColorRgb {
    uint8 r, g, b;
}


Texture2D create_texture2D(Image image) {
    Texture2D tex;
    tex.width = image.width;
    tex.height = image.height;
    glGenTextures(1, *tex.gl_handle);
    glBindTexture(GL_TEXTURE_2D, tex.gl_handle);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);


    const filter = GL_LINEAR; // GL_NEAREST
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, filter);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, filter);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.width, image.height, 0, GL_RGBA, GL_UNSIGNED_BYTE, image.pixels);
    glGenerateMipmap(GL_TEXTURE_2D);

    glBindTexture(GL_TEXTURE_2D, 0);
    return tex;
}

void bind(with Texture2D tex) {
    glBindTexture(GL_TEXTURE_2D, tex.gl_handle);
}

struct DrawBuffers {
    uint32 vao, vbo, ebo;
    int32 elements_count;
}

struct vertex {
    float32 x, y;
    float32 u, v;
    Color color;
}

DrawBuffers create_draw_buffers() {
    DrawBuffers db;
    db.elements_count = 0;

    glGenVertexArrays(1, *db.vao);
    glBindVertexArray(db.vao);

    glGenBuffers(1, *db.vbo);
    glBindBuffer(GL_ARRAY_BUFFER , db.vbo);
    glGenBuffers(1, *db.ebo);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, db.ebo);

    vertex* v = null;

    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 2, GL_FLOAT, false, sizeof vertex, *v.x);

    glEnableVertexAttribArray(1);
    glVertexAttribPointer(1, 2, GL_FLOAT, false, sizeof vertex, *v.u);

    glEnableVertexAttribArray(2);
    glVertexAttribPointer(2, 4, GL_UNSIGNED_BYTE, true, sizeof vertex, *v.color);

    glBindVertexArray(0);

    return db;
}

void update_buffers(with DrawBuffers* db, vertex* vertices, uint32 vertices_count, uint32* indices, uint32 indices_count) {
    db.elements_count = indices_count as int32;

    glBindVertexArray(db.vao);
    glBufferData(GL_ARRAY_BUFFER, (sizeof vertex) * vertices_count, vertices, GL_STATIC_DRAW);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, (sizeof uint32) * indices_count, indices, GL_STATIC_DRAW);
    glBindVertexArray(0);
}

void draw_elements(with DrawBuffers db) {
    glBindVertexArray(db.vao);
    glDrawElements(GL_TRIANGLES, db.elements_count, GL_UNSIGNED_INT, null);
}

void draw_elements(with DrawBuffers db, uint32 instanceCount) {
    glBindVertexArray(db.vao);
    glDrawElementsInstanced(GL_TRIANGLES, db.elements_count, GL_UNSIGNED_INT, null, instanceCount);
}

