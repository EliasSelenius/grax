

Shader default3d_shader;
Shader default2d_shader;

Shader ui_shader;

UBO* camera_ubo;
UBO* application_ubo;

Texture2D white_texture;
Texture2D CascadiaMono_texture;



Application app = {
    window_width = 1600,
    window_height = 900
    // sim_delta = 1.0 / 60.0,
    // sim_speed = 1.0
};

struct Application {
    GLFWwindow* main_window;
    uint32 window_width, window_height;
    float32 width_over_height;
    float32 height_over_width;
    float32 window_margin;

    uint32 refresh_rate;

    // measured:
    float64 total_run_time;
    float64 frame_time;

    // float64 sim_time;
    // float32 sim_delta;
    // float32 sim_speed;

    void(uint32, uint32) on_resize_user;
}

void app_update_size(uint32 w, h) {
    app.window_width = w;
    app.window_height = h;

    app.width_over_height = w as float32 / h as float32;
    app.height_over_width = h as float32 / w as float32;

    app.window_margin = app.width_over_height - 1.0;
}

vec2 window_size() {
    int32 w;
    int32 h;
    glfwGetWindowSize(app.main_window, *w, *h);
    return {w, h} as vec2;
}

bool grax_loop() {

    dispatch_immediate();

    glfwSwapBuffers(app.main_window);
    input_state_reset();
    glfwPollEvents();

    if glfwWindowShouldClose(app.main_window) {
        glfwDestroyWindow(app.main_window);
        glfwTerminate();
        return false;
    }

    // begin next frame:

    input_update();

    {
        let prev_time = app.total_run_time;
        app.total_run_time = glfwGetTime();
        app.frame_time = app.total_run_time - prev_time;


        static uint32 frame_times_count = 60*10;
        static float32* frame_times = calloc(1, frame_times_count * sizeof float32);
        static uint32 frame_time_index = 0;

        frame_times[frame_time_index++ % frame_times_count] = app.frame_time as float32;

        float32 dt_min = 99999999999999999999.0;
        float32 dt_max = 0;
        float32 dt_avg = 0;

        for 0 .. frame_times_count {
            let dt = frame_times[it];
            dt_min = min(dt_min, dt);
            dt_max = max(dt_max, dt);
            dt_avg += dt;
        }

        dt_avg /= frame_times_count;

        void draw_time(uint32 row, float32 dt) {
            let micro_sec = round(dt * 1000_000) as uint64;
            const text_height = 0.05;
            vec2 pos = make_vec(-1 - app.window_margin + text_height * 0.25, text_height * row);
            draw_text(pos, text_height, to_string(micro_sec), Yellow);
        }


        draw_time(0, app.frame_time as float32);
        draw_time(1, dt_min);
        draw_time(2, dt_max);
        draw_time(3, dt_avg);

    }




    { // update application UBO
        struct AppData {
            float32 time, delta, width, height;
        }
        AppData data = {};
        data.time = app.total_run_time as float32;
        data.delta = app.frame_time as float32;
        data.width = app.window_width;
        data.height = app.window_height;
        update_buffer(application_ubo.buffer_id, sizeof AppData, *data);
    }

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    return true;
}

void grax_init() {

    if !glfwInit() {
        print("[ERROR]: failed to initilize glfw.\n");
        return;
    }

    // glfwWindowHint(GLFW_DECORATED, GLFW_FALSE);

    // glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    // glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    // glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    app.main_window = glfwCreateWindow(app.window_width as int32, app.window_height as int32, "Grax", null, null);
    app_update_size(app.window_width, app.window_height);

    if !app.main_window {
        glfwTerminate();
        print("[ERROR]: failed to initilize app.main_window.\n");
        return;
    }

    glfwMakeContextCurrent(app.main_window);
    glfwSwapInterval(1);


    // glfw callbacks
    GLFW_callbacks cb = {};
    cb.callback_framebuffersize = on_resize;
    cb.callback_scroll = on_scroll;
    set_glfw_callbacks(app.main_window, cb);


    load_opengl(glfwGetProcAddress);
    print("[INFO]: OpenGL version: ", glGetString(GL_VERSION) as char*, "\n");

    if true {
        glEnable(GL_DEBUG_OUTPUT);
        glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);
        glDebugMessageCallback(opengl_debug_callback, null);
        print("[INFO]: OpenGL synchronous debug messages enabled.\n");
    }

    enable_alpha_blending();
    enable_depth_test();
    glEnable(GL_CULL_FACE);
    glClearColor(0.1, 0.1, 0.1, 1.0);

    camera_ubo = get_ubo("Camera");
    application_ubo = get_ubo("Application");


    { // load assets:
        // TODO: the "../grax/" here is a hack!

        default3d_shader = load_shader("../grax/shaders/default3d.glsl");
        default2d_shader = load_shader("../grax/shaders/default2d.glsl");

        gizmo_points_shader = load_shader("../grax/shaders/gizmo_points3D.glsl");

        ui_shader = load_shader("../grax/shaders/ui.glsl");
        CascadiaMono_texture = load_texture2D("../grax/CascadiaMono.bmp");
        set_filter(CascadiaMono_texture, TextureFilter.linear);
        // = load_texture2D("../grax/tinyfont.bmp");
    }

    { // init white texture
        Color pixel = { 255, 255, 255, 255 };
        Image image = { width = 1, height = 1, pixels = *pixel };
        white_texture = create_texture2D(image);
    }

    init_immediate_renderer();
}


void on_resize(GLFWwindow* window, int32 w, int32 h) {
    if w == 0 or h == 0  return;

    app_update_size(w as uint32, h as uint32);

    print("[INFO]: Window resize: ", w, "x", h, "\n");

    glViewport(0, 0, w, h);

    if app.on_resize_user  app.on_resize_user(w as uint32, h as uint32);
}

void opengl_debug_callback(GLenum source, GLenum _type, GLuint id, GLenum severity, GLsizei length, /*const*/ GLchar* message, /*const*/ void* userParam) {

    /* for reference:
        glDebugMessageInsert() - to generate custom debug messages
        glDebugMessageControl() - to filter out debug messages

        to scope messages: https://www.khronos.org/opengl/wiki/Debug_Output#Scoping_messages
        glPushDebugGroup()
        glPopDebugGroup()

        glObjectLabel() - to give each opengl object a string name that will be used by the debug messages

        messages are uniquely identified by: source, type, and id
    */

    char* get_debug_type_string(GLenum t) {
        switch t {
            case GL_DEBUG_TYPE_ERROR:               return "ERROR";               // An error, typically from the API
            case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: return "DEPRECATED_BEHAVIOR"; // Some behavior marked deprecated has been used
            case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:  return "UNDEFINED_BEHAVIOR";  // Something has invoked undefined behavior
            case GL_DEBUG_TYPE_PORTABILITY:         return "PORTABILITY";         // Some functionality the user relies upon is not portable
            case GL_DEBUG_TYPE_PERFORMANCE:         return "PERFORMANCE";         // Code has triggered possible performance issues
            case GL_DEBUG_TYPE_MARKER:              return "MARKER";              // Command stream annotation
            case GL_DEBUG_TYPE_OTHER:               return "OTHER";               // Some type that isn't one of these
            case GL_DEBUG_TYPE_PUSH_GROUP:          return "PUSH_GROUP";
            case GL_DEBUG_TYPE_POP_GROUP:           return "POP_GROUP";
        }

        return null;
    }

    char* get_debug_source(GLenum src) {
        switch src {
            case GL_DEBUG_SOURCE_API:             return "API";             // Calls to the OpenGL API
            case GL_DEBUG_SOURCE_WINDOW_SYSTEM:   return "WINDOW_SYSTEM";   // Calls to a window-system API
            case GL_DEBUG_SOURCE_SHADER_COMPILER: return "SHADER_COMPILER"; // A compiler for a shading language
            case GL_DEBUG_SOURCE_THIRD_PARTY:     return "THIRD_PARTY";     // An application associated with OpenGL
            case GL_DEBUG_SOURCE_APPLICATION:     return "APPLICATION";     // Generated by the user of this application
            case GL_DEBUG_SOURCE_OTHER:           return "OTHER";           // Some source that isn't one of these
        }

        return null;
    }

    char* get_debug_severity(GLenum sev) {
        switch sev {
            case GL_DEBUG_SEVERITY_HIGH:         return "HIGH";         // All OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior
            case GL_DEBUG_SEVERITY_MEDIUM:       return "MEDIUM";       // Major performance warnings, shader compilation/linking warnings, or the use of deprecated functionality
            case GL_DEBUG_SEVERITY_LOW:          return "LOW";          // Redundant state change performance warning, or unimportant undefined behavior
            case GL_DEBUG_SEVERITY_NOTIFICATION: return "NOTIFICATION"; // Anything that isn't an error or performance issue.
        }

        return null;
    }

    if _type == GL_DEBUG_TYPE_OTHER  return; // opengl has a tendency to spam some info we dont care about

    print("[opengl_debug_callback]: (msg_id: ", id, ") ", get_debug_source(source), " ", get_debug_type_string(_type), " (severity: ", get_debug_severity(severity), "): ", message, "\n");
}

struct GLFW_MonitorInfo {
    char* name;
    ivec2 pos;
    vec2 content_scale;
    ivec2 physical_size;
    GLFWvidmode* current_video_mode;
    GLFWvidmode[] video_modes;
}

GLFW_MonitorInfo get_monitor_info(GLFWmonitor* monitor) {
    GLFW_MonitorInfo info = {};

    info.name = glfwGetMonitorName(monitor);

    glfwGetMonitorPos(monitor, *info.pos.x, *info.pos.y);
    glfwGetMonitorContentScale(monitor, *info.content_scale.x, *info.content_scale.y);
    glfwGetMonitorPhysicalSize(monitor, *info.physical_size.x, *info.physical_size.y);

    info.current_video_mode = glfwGetVideoMode(monitor);
    info.video_modes.data = glfwGetVideoModes(monitor, *info.video_modes.length);

    return info;
}

GLFWmonitor* get_ideal_monitor(GLFWwindow* window) {

    int32 x;
    int32 y;
    int32 w;
    int32 h;
    glfwGetWindowPos(window, *x, *y);
    glfwGetWindowSize(window, *w, *h);

    int32 monitor_count;
    GLFWmonitor** monitors = glfwGetMonitors(*monitor_count);

    int32 ideal = 0;
    int32 highest_area = 0;
    for i : 0 .. monitor_count {
        GLFWmonitor* m = monitors[i];

        int32 mX;
        int32 mY;
        glfwGetMonitorPos(m, *mX, *mY);
        GLFWvidmode* mode = glfwGetVideoMode(m);

        int32 area = max(0, min(x + w, mX + mode.width ) - max(x, mX))
                   * max(0, min(y + h, mY + mode.height) - max(y, mY));

        if area > highest_area {
            highest_area = area;
            ideal = i;
        }
    }

    return monitors[ideal];
}

void toggle_fullscreen(GLFWwindow* window) {
    GLFWmonitor* monitor = glfwGetWindowMonitor(window);
    if (monitor) {
        // set to windowed
        int32 mX;
        int32 mY;
        glfwGetMonitorPos(monitor, *mX, *mY);
        // TODO: calc better values here instead of +60, for example we could center the window, or remember its last position
        glfwSetWindowMonitor(window, null, mX + 60, mY + 60, 1600, 900, 0);

    } else {
        // set to fullscreen
        GLFWmonitor* ideal_monitor = get_ideal_monitor(window);
        GLFWvidmode* mode = glfwGetVideoMode(ideal_monitor);
        print("vidmode: ", (@mode), "\n");
        glfwSetWindowMonitor(window, ideal_monitor, 0, 0, mode.width, mode.height, mode.refreshRate);

        glfwSwapInterval(1); // for some reason seting the window monitor seems to disable the swap interval
    }
}


enum OpenGLBlendingMode {
    disabled; src_alpha; additive;
}

void set_blend_mode(OpenGLBlendingMode mode) {
    switch mode {
        case .disabled:  disable_blending(); break;
        case .src_alpha: enable_alpha_blending(); break;
        case .additive:  enable_additive_blending(); break;
    }
}

void enable_alpha_blending() {
    glEnable(GL_BLEND);
    glBlendEquation(GL_FUNC_ADD);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
}

void enable_additive_blending() {
    glEnable(GL_BLEND);
    glBlendEquation(GL_FUNC_ADD);
    glBlendFunc(GL_ONE, GL_ONE);
}

void disable_blending() { glDisable(GL_BLEND); }

void enable_depth_test() { glEnable(GL_DEPTH_TEST); }
void disable_depth_test() { glDisable(GL_DEPTH_TEST); }



void set_clear_color(float32 r, g, b, a) { glClearColor(r, g, b, a); }
void set_clear_color(Color color) { glClearColor(color.r / 255.0, color.g / 255.0, color.b / 255.0, color.a / 255.0); }
void set_clear_depth(float64 depth) { glClearDepth(depth); }

void clear_color() { glClear(GL_COLOR_BUFFER_BIT); }
void clear_color(float32 r, g, b, a) { set_clear_color(r, g, b, a); clear_color(); }
void clear_color(Color color) { set_clear_color(color); clear_color(); }

void clear_depth() { glClear(GL_DEPTH_BUFFER_BIT); }
void clear_depth(float64 depth) { set_clear_depth(depth); glClear(GL_DEPTH_BUFFER_BIT); }


struct GLFW_callbacks {
    GLFWerrorfun               callback_error;                // void(int32, /*const*/ char*);
    GLFWwindowposfun           callback_windowpos;            // void(GLFWwindow*, int32, int32);
    GLFWwindowsizefun          callback_windowsize;           // void(GLFWwindow*, int32, int32);
    GLFWwindowclosefun         callback_windowclose;          // void(GLFWwindow*);
    GLFWwindowrefreshfun       callback_windowrefresh;        // void(GLFWwindow*);
    GLFWwindowfocusfun         callback_windowfocus;          // void(GLFWwindow*, int32);
    GLFWwindowiconifyfun       callback_windowiconify;        // void(GLFWwindow*, int32);
    GLFWwindowmaximizefun      callback_windowmaximize;       // void(GLFWwindow*, int32);
    GLFWframebuffersizefun     callback_framebuffersize;      // void(GLFWwindow*, int32, int32);
    GLFWwindowcontentscalefun  callback_windowcontentscale;   // void(GLFWwindow*, float32, float32);
    GLFWmousebuttonfun         callback_mousebutton;          // void(GLFWwindow*, int32, int32, int32);
    GLFWcursorposfun           callback_cursorpos;            // void(GLFWwindow*, float64, float64);
    GLFWcursorenterfun         callback_cursorenter;          // void(GLFWwindow*, int32);
    GLFWscrollfun              callback_scroll;               // void(GLFWwindow*, float64, float64);
    GLFWkeyfun                 callback_key;                  // void(GLFWwindow*, int32, int32, int32, int32);
    GLFWcharfun                callback_char;                 // void(GLFWwindow*, uint32);
    GLFWcharmodsfun            callback_charmods;             // void(GLFWwindow*, uint32, int32);
    GLFWdropfun                callback_drop;                 // void(GLFWwindow*, int32, /*const*/ char**);
    GLFWmonitorfun             callback_monitor;              // void(GLFWmonitor*, int32);
    GLFWjoystickfun            callback_joystick;             // void(int32, int32);
}

void set_glfw_callbacks(GLFWwindow* window, GLFW_callbacks cb) {
    if cb.callback_error               glfwSetErrorCallback              (cb.callback_error);

    // window
    if cb.callback_windowpos           glfwSetWindowPosCallback          (window, cb.callback_windowpos);
    if cb.callback_windowsize          glfwSetWindowSizeCallback         (window, cb.callback_windowsize);
    if cb.callback_windowclose         glfwSetWindowCloseCallback        (window, cb.callback_windowclose);
    if cb.callback_windowrefresh       glfwSetWindowRefreshCallback      (window, cb.callback_windowrefresh);
    if cb.callback_windowfocus         glfwSetWindowFocusCallback        (window, cb.callback_windowfocus);
    if cb.callback_windowiconify       glfwSetWindowIconifyCallback      (window, cb.callback_windowiconify);
    if cb.callback_windowmaximize      glfwSetWindowMaximizeCallback     (window, cb.callback_windowmaximize);
    if cb.callback_framebuffersize     glfwSetFramebufferSizeCallback    (window, cb.callback_framebuffersize);
    if cb.callback_windowcontentscale  glfwSetWindowContentScaleCallback (window, cb.callback_windowcontentscale);

    // mouse
    if cb.callback_mousebutton         glfwSetMouseButtonCallback        (window, cb.callback_mousebutton);
    if cb.callback_cursorpos           glfwSetCursorPosCallback          (window, cb.callback_cursorpos);
    if cb.callback_cursorenter         glfwSetCursorEnterCallback        (window, cb.callback_cursorenter);
    if cb.callback_scroll              glfwSetScrollCallback             (window, cb.callback_scroll);

    // keyboard
    if cb.callback_key                 glfwSetKeyCallback                (window, cb.callback_key);
    if cb.callback_char                glfwSetCharCallback               (window, cb.callback_char);
    if cb.callback_charmods            glfwSetCharModsCallback           (window, cb.callback_charmods);

    if cb.callback_drop                glfwSetDropCallback               (window, cb.callback_drop);

    if cb.callback_monitor             glfwSetMonitorCallback            (cb.callback_monitor);
    if cb.callback_joystick            glfwSetJoystickCallback           (cb.callback_joystick);
}
