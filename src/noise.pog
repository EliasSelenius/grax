

int32 global_seed = 0;

// returns float in range [-1 .. 1]
float32 random(int32 seed) {
    seed = (seed << 13) ^ seed;
    return (1.0 - ((seed * (seed * seed * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);
}

float32 random() return random(global_seed++);

vec2 random_unit_vec2() return random_unit_vec2(global_seed++);
vec2 random_unit_vec2(int32 seed) {
    float32 a = random(seed) * Pi;
    return { cosf(a), sinf(a) };
}


vec2 random_vec2(int32 seed, float32 max_len) return random_unit_vec2(seed) * max_len * random01(seed+1);
vec2 random_vec2(float32 max_len) return random_vec2(global_seed++, max_len);

float32 random01(int32 seed) return (random(seed) + 1.0) / 2.0;
float32 random01() return random01(global_seed++);

float32 random_range(int32 seed, float32 min, max) return lerp((random(seed) + 1.0) / 2.0, min, max);
float32 random_range(float32 min, max) return random_range(global_seed++, min, max);




// // TODO: the 'quality' of randomnes is not tested here
// float32 random(int32 seed_x, seed_y) {
//     return random(seed_x + seed_y * 57);
// }


float32 gnoise(vec2 v) return gnoise(v.x, v.y);
float32 gnoise(float32 x, y) {

    vec2 random_vec2(float32 x, y) {
        vec2 v;
        v.x = x * 127.1 + y * 311.7;
        v.y = x * 268.5 + y * 183.3;

        v.x = fract(sinf(v.x) * 43758.5453123) * 2.0 - 1.0;
        v.y = fract(sinf(v.y) * 43758.5453123) * 2.0 - 1.0;

        return v;
    }

    float32 ix = floorf(x);
    float32 iy = floorf(y);
    float32 fx = fract(x);
    float32 fy = fract(y);

    float32 ux = fx * fx * (-fx * 2.0 + 3.0);
    float32 uy = fy * fy * (-fy * 2.0 + 3.0);

    vec2 r = random_vec2(ix, iy);
    float32 d1 = r.x * fx + r.y * fy;

    r = random_vec2(ix + 1.0, iy);
    float32 d2 = r.x * (fx - 1.0) + r.y * fy;

    r = random_vec2(ix, iy + 1.0);
    float32 d3 = r.x * fx + r.y * (fy - 1.0);

    r = random_vec2(ix + 1.0, iy + 1.0);
    float32 d4 = r.x * (fx - 1.0) + r.y * (fy - 1.0);

    return lerp(uy, lerp(ux, d1, d2), lerp(ux, d3, d4));
}


float32 gnoise(vec3 p) {

    vec3 hash(vec3 p) {
        p = make_vec(dot(p, make_vec(127.1, 311.7,  74.7)),
                     dot(p, make_vec(269.5, 183.3, 246.1)),
                     dot(p, make_vec(113.5, 271.9, 124.6)));

        p = {sinf(p.x), sinf(p.y), sinf(p.z)};
        return fract(p*43758.5453123) * 2 - vec3_one;
    }

    vec3 i = floor(p);
    vec3 f = fract(p);
    vec3 u = f * f * (3*vec3_one - 2*f);

    vec3 p000 = {0, 0, 0};
    vec3 p100 = {1, 0, 0};
    vec3 p010 = {0, 1, 0};
    vec3 p110 = {1, 1, 0};
    vec3 p001 = {0, 0, 1};
    vec3 p101 = {1, 0, 1};
    vec3 p011 = {0, 1, 1};
    vec3 p111 = {1, 1, 1};

    float32 d000 = dot(hash(i + p000), f - p000);
    float32 d100 = dot(hash(i + p100), f - p100);
    float32 d010 = dot(hash(i + p010), f - p010);
    float32 d110 = dot(hash(i + p110), f - p110);
    float32 d001 = dot(hash(i + p001), f - p001);
    float32 d101 = dot(hash(i + p101), f - p101);
    float32 d011 = dot(hash(i + p011), f - p011);
    float32 d111 = dot(hash(i + p111), f - p111);

    float32 a = lerp(u.x, d000, d100);
    float32 b = lerp(u.x, d010, d110);
    float32 c = lerp(u.x, d001, d101);
    float32 d = lerp(u.x, d011, d111);

    return lerp(u.z, lerp(u.y, a, b), lerp(u.y, c, d));
}
