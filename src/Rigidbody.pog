
/*
    Relevant articles by Glenn Fiedler:
        integration:             https://gafferongames.com/post/integration_basics/
        integrating orientation: https://gafferongames.com/post/physics_in_3d/
        overview:                https://gafferongames.com/categories/game-physics/

*/


struct Rigidbody {
    float32 mass;
    vec3 velocity;
    vec3 angular_velocity;
}

vec3 get_tangential_velocity(vec3 ang_vel, p) {
    return cross(p, ang_vel);
}

void add_velocity(with Rigidbody* rb, vec3 vel, offset) {

}

void add_force(with Rigidbody* rb, vec3 force) {
    rb.velocity = rb.velocity + force * (1.0 / rb.mass);
}

void add_force(with Rigidbody* rb, vec3 force, offset) {
    add_force(rb, force);
    // TODO: cross(force, offset) is angular acceleration, not torque?
    add_torque(rb, cross(force, offset));
}

void add_torque(with Rigidbody* rb, vec3 torque) {
    // TODO: mass / inertia ?
    rb.angular_velocity = rb.angular_velocity + torque;
}

void update_rigidbody_transform(with Transform* tr, with Rigidbody* rb, float32 dt) {
    tr.position = tr.position + rb.velocity * dt;

    let axis = rb.angular_velocity;
    let angle = length(axis);
    if angle != 0 {
        axis = axis * (1.0 / angle); // normalizes
        rotate(tr, axis, angle * dt);
    }
}

// enum CollisonShape {
//     Sphere; Point; Capsule; Cube; Triangle;
// }

// struct Collider {
//     CollisonShape shape;
//     vec3 A, B, C;
//     float32 r1, r2;
// }

// Intersection collider_intersection(Collider c1, c2) {
//     switch c1.shape {
//         case Sphere: switch c2.shape {
//             case Sphere: break;
//             case Point: break;
//             case Capsule: break;
//             case Cube: break;
//             case Triangle: break;
//         } break;
//         case Point: switch c2.shape {
//             case Point: break;
//             case Capsule: break;
//             case Cube: break;
//             case Triangle: break;
//             default: goto swap;
//         } break;
//         case Capsule: switch c2.shape {
//             case Capsule: break;
//             case Cube: break;
//             case Triangle: break;
//             default: goto swap;
//         } break;
//         case Cube: switch c2.shape {
//             case Cube: break;
//             case Triangle: break;
//             default: goto swap;
//         } break;
//         case Triangle: switch c2.shape {
//             case Triangle: break;
//             default: goto swap;
//         } break;
//     }

//     swap:
//     let inr = collider_intersection(c2, c1);
//     inr.normal = neg(inr.normal);
//     return inr;
// }


bool point_inside_bb(vec2 p, bb_min, bb_max) {
    return p.x < bb_max.x and p.y < bb_max.y and p.x > bb_min.x and p.y > bb_min.y;
}

struct Intersection {
    vec3 contact_point;
    vec3 normal;
    float32 depth;
}

vec3 closest_point_on_linesegment(vec3 a, b, p) {
    let ab = b - a;
    let t = clamp(dot(ab, p - a) / dot(ab, ab), 0, 1);
    return lerp(t, a, b);
}

/*
    capsules defined as:
        first: line segment ab with radius ab_r
        second: line segment cd with radius cd_r
*/
Intersection capsule_intersects(vec3 a, b, c, d, float32 ab_r, cd_r) {
    Intersection circle_depth(vec3 a, b, c, d, end_point, float32 ab_r, cd_r) {
        vec3 B = closest_point_on_linesegment(c, d, end_point);
        vec3 A = closest_point_on_linesegment(a, b, B);

        if false {
            gizmo_sphere(A, ab_r, Red);
            gizmo_sphere(B, cd_r, Red);
            gizmo_line(A, B, Yellow);
        }

        Intersection inr = {};
        inr.contact_point = B + (A - B)*0.5; // TODO: this is wrong for different radiuses
        inr.normal = normalize(A - B);
        inr.depth = ab_r + cd_r - dist(A, B);

        return inr;
    }

    let inr_a = circle_depth(a, b, c, d, a, ab_r, cd_r);
    let inr_b = circle_depth(a, b, c, d, b, ab_r, cd_r);

    return inr_a.depth < inr_b.depth ? inr_b : inr_a;
}

Intersection capsule_point_intersects(vec3 a, b, p, float32 radius) {
    vec3 A = closest_point_on_linesegment(a, b, p);

    Intersection inr = {};
    inr.normal = normalize(p - A);
    inr.contact_point = A + inr.normal*radius;
    inr.depth = radius - dist(A, p);

    return inr;
}

// Intersection capsule_sphere_intersects(vec3 a, b, p, float32 ab_r, p_r) {

// }