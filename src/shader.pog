
Shader* active_shader;
UBO** uniform_buffer_objects = list_create(sizeof UBO*) as UBO**;

struct UBO {
    string name;
    uint32 binding_point;
    uint32 buffer_id;
}

struct Shader {
    string name;
    uint32 gl_handle;
    StringBuilder debug_log;

    // TODO: implement introspection: https://www.khronos.org/opengl/wiki/Program_Introspection#Interface_query
}

void use(Shader* s) {
    active_shader = s;
    glUseProgram(s.gl_handle);
}

UBO* get_ubo(char* name) { return get_ubo(make_string(name)); }
UBO* get_ubo(string name) {

    uint32 len = list_length(uniform_buffer_objects as void*);
    for 0 .. len {
        UBO* ubo = uniform_buffer_objects[it];
        if string_equals(name, ubo.name) return ubo;
    }

    UBO* ubo = malloc(sizeof UBO);
    ubo.binding_point = len;
    ubo.name = alloc_string_copy(name);

    glGenBuffers(1, *ubo.buffer_id);
    glBindBufferBase(GL_UNIFORM_BUFFER, ubo.binding_point, ubo.buffer_id);

    list_add(*uniform_buffer_objects as void**, *ubo as void*);

    return uniform_buffer_objects[len];
}

void bind_ubos(with Shader* s) {
    int32 num_ubos;
    int32 max_name_len;
    glGetProgramiv(s.gl_handle, GL_ACTIVE_UNIFORM_BLOCKS, *num_ubos);
    glGetProgramiv(s.gl_handle, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, *max_name_len);

    char* ubo_name = malloc(max_name_len as uint64); // TODO: might want to do stack allocation for this

    for 0 .. num_ubos {
        int32 name_len;
        glGetActiveUniformBlockName(s.gl_handle, it, max_name_len, *name_len, ubo_name);
        uint32 ubo_index = glGetUniformBlockIndex(s.gl_handle, ubo_name);
        UBO* ubo = get_ubo(make_string(ubo_name));
        glUniformBlockBinding(s.gl_handle, ubo_index, ubo.binding_point);
    }

    free(ubo_name);
}

void process_glsl_source(StringBuilder* sb, char* filename) {
    char* src = fileread(filename);

    sb_append(sb, "#line 1\n");

    char* buffer = src;
    uint32 line_num = 1;
    while @buffer {
        let line = substr_until(buffer, '\n');

        if starts_with(line.chars, "#include \"") {
            char* fn = buffer + 10;
            let len = substr_until(fn, '"').length - 1;
            fn[len] = 0 as char;

            process_glsl_source(sb, fn);

            sb_append(sb, "\n#line ");
            sb_append(sb, to_string(line_num + 1));
            sb_append(sb, "\n");
        } else {
            sb_append(sb, line);
        }


        line_num++;
        buffer += line.length;
    }

    free(src);
}

Shader load_shader(char* filename) {

    StringBuilder src = sb_create();
    process_glsl_source(*src, filename);

    StringBuilder frag = sb_create();
    StringBuilder vert = sb_create();

    // NOTE: layout(binding) requires "#version 420" or later
    char* glsl_version = "#version 420 core\n";

    sb_append(*frag, glsl_version);
    sb_append(*frag, "#define IO in\n");
    sb_append(*frag, "#define FragmentShader\n");
    sb_append(*frag, src.content);

    sb_append(*vert, glsl_version);
    sb_append(*vert, "#define IO out\n");
    sb_append(*vert, "#define VertexShader\n");
    sb_append(*vert, src.content);

    // TODO: what is the ownership of filename?
    Shader s = create_shader(make_string(filename), frag.content, vert.content);

    sb_free(frag);
    sb_free(vert);
    sb_free(src);
    return s;
}

Shader load_shader(char* frag_filename, char* vert_filename) {
    char* frag_src = fileread(frag_filename);
    char* vert_src = fileread(vert_filename);

    let s = create_shader(make_string(""), frag_src, vert_src);

    free(frag_src);
    free(vert_src);

    return s;
}

Shader create_shader(string name, char* fragsrc, char* vertsrc) {

    char* append_info_log(StringBuilder* sb, int32 len) {
        sb_grow(sb, len as uint32);
        char* info_log = sb.content + sb.length;
        sb.length += len as uint32 - 1; // GL_INFO_LOG_LENGTH includes zero terminator
        return info_log;
    }

    uint32 make_shader(Shader* program, GLenum _type, char* code) {

        char* get_shader_type_string(GLenum shader_type) {
            switch shader_type {
                case GL_COMPUTE_SHADER:         return "compute";
                case GL_VERTEX_SHADER:          return "vertex";
                case GL_TESS_CONTROL_SHADER:    return "tess_control";
                case GL_TESS_EVALUATION_SHADER: return "tess_evaluation";
                case GL_GEOMETRY_SHADER:        return "geometry";
                case GL_FRAGMENT_SHADER:        return "fragment";
            }

            return null;
        }

        uint32 shader = glCreateShader(_type);
        glShaderSource(shader, 1, *code, null); // null assumes null-terminated string
        glCompileShader(shader); // NOTE: my stinky laptop needed this

        GLint success = 0;
        glGetShaderiv(shader, GL_COMPILE_STATUS, *success);
        if success == 0 {
            let sb = *program.debug_log;

            let shader_type = get_shader_type_string(_type);
            sb_append(sb, shader_type);
            sb_append(sb, " info log:\n");

            GLint info_log_len = 0;
            glGetShaderiv(shader, GL_INFO_LOG_LENGTH, *info_log_len);
            char* info_log = append_info_log(sb, info_log_len);
            glGetShaderInfoLog(shader, info_log_len, null, info_log);
            sb_append(sb, "\n\n");

            sb_append(sb, shader_type);
            sb_append(sb, " source code:\n");
            sb_append(sb, code);
            sb_append(sb, "\n///////////////////////////END_OF_CODE///////////////////////////\n\n\n\n");

            print("[INFO]: ShaderProgram ", program.gl_handle, " \"", program.name, "\" ", shader_type, " shader failed to compile. info log was generated.\n");
        }

        glAttachShader(program.gl_handle, shader);
        return shader;
    }

    void cleanup_shader(Shader program, uint32 shader) {
        glDetachShader(program.gl_handle, shader);
        glDeleteShader(shader);
    }

    Shader program = {};
    // TODO: maybe remove possible extension from name. like .glsl
    program.name = name; // TODO: we dont know the ownership of name
    program.gl_handle = glCreateProgram();
    program.debug_log = sb_create(); // TODO: is it really necessary to have debug_log be a field on Shader, just make it a local...
    sb_append(*program.debug_log, "\n\n");

    let f = make_shader(*program, GL_FRAGMENT_SHADER, fragsrc);
    let v = make_shader(*program, GL_VERTEX_SHADER, vertsrc);

    glLinkProgram(program.gl_handle);

    cleanup_shader(program, f);
    cleanup_shader(program, v);


    int32 status;
    glGetProgramiv(program.gl_handle, GL_LINK_STATUS, *status);
    if status == 0 {
        let sb = *program.debug_log;
        sb_append(sb, "ShaderProgram \"");
        sb_append(sb, program.name);
        sb_append(sb, "\" info log:\n");

        int32 info_log_len;
        glGetProgramiv(program.gl_handle, GL_INFO_LOG_LENGTH, *info_log_len);
        char* log = append_info_log(sb, info_log_len);
        glGetProgramInfoLog(program.gl_handle, info_log_len, null, log);

        let log_file = concat("shader_debug_log_", trim(substr_until(substr_to_end(program.name, '/'), '.'), 1), ".txt");
        filewrite(log_file, program.debug_log.content);
        sb_free(program.debug_log);

        print("[INFO]: ShaderProgram ", program.gl_handle, " \"", program.name, "\" failed to link. info log was generated.\n");

        glDeleteProgram(program.gl_handle);
        program.gl_handle = 0;
        return program;
    }


    bind_ubos(*program);

    return program;
}

void set_uniform(char* name, float32 x)          glUniform1f (glGetUniformLocation(active_shader.gl_handle, name), x);
void set_uniform(char* name, float32 x, y)       glUniform2f (glGetUniformLocation(active_shader.gl_handle, name), x, y);
void set_uniform(char* name, float32 x, y, z)    glUniform3f (glGetUniformLocation(active_shader.gl_handle, name), x, y, z);
void set_uniform(char* name, float32 x, y, z, w) glUniform4f (glGetUniformLocation(active_shader.gl_handle, name), x, y, z, w);
void set_uniform(char* name, float64 x)          glUniform1d (glGetUniformLocation(active_shader.gl_handle, name), x);
void set_uniform(char* name, float64 x, y)       glUniform2d (glGetUniformLocation(active_shader.gl_handle, name), x, y);
void set_uniform(char* name, float64 x, y, z)    glUniform3d (glGetUniformLocation(active_shader.gl_handle, name), x, y, z);
void set_uniform(char* name, float64 x, y, z, w) glUniform4d (glGetUniformLocation(active_shader.gl_handle, name), x, y, z, w);
void set_uniform(char* name, int32   x)          glUniform1i (glGetUniformLocation(active_shader.gl_handle, name), x);
void set_uniform(char* name, int32   x, y)       glUniform2i (glGetUniformLocation(active_shader.gl_handle, name), x, y);
void set_uniform(char* name, int32   x, y, z)    glUniform3i (glGetUniformLocation(active_shader.gl_handle, name), x, y, z);
void set_uniform(char* name, int32   x, y, z, w) glUniform4i (glGetUniformLocation(active_shader.gl_handle, name), x, y, z, w);
void set_uniform(char* name, uint32  x)          glUniform1ui(glGetUniformLocation(active_shader.gl_handle, name), x);
void set_uniform(char* name, uint32  x, y)       glUniform2ui(glGetUniformLocation(active_shader.gl_handle, name), x, y);
void set_uniform(char* name, uint32  x, y, z)    glUniform3ui(glGetUniformLocation(active_shader.gl_handle, name), x, y, z);
void set_uniform(char* name, uint32  x, y, z, w) glUniform4ui(glGetUniformLocation(active_shader.gl_handle, name), x, y, z, w);

void set_uniform(char* name, vec2 v)  set_uniform(name, v.x, v.y);
void set_uniform(char* name, vec3 v)  set_uniform(name, v.x, v.y, v.z);
void set_uniform(char* name, vec4 v)  set_uniform(name, v.x, v.y, v.z, v.w);
void set_uniform(char* name, ivec2 v) set_uniform(name, v.x, v.y);
void set_uniform(char* name, ivec3 v) set_uniform(name, v.x, v.y, v.z);
void set_uniform(char* name, ivec4 v) set_uniform(name, v.x, v.y, v.z, v.w);

// void set_uniform(char* name, int32 count, float64* value) glUniform1dv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, float32* value) glUniform1fv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, int32* value)   glUniform1iv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, uint32* value)  glUniform1uiv(glGetUniformLocation(active_shader.gl_handle, name), count, value);

// void set_uniform(char* name, int32 count, float64* value) glUniform2dv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, float32* value) glUniform2fv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, int32* value)   glUniform2iv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, uint32* value)  glUniform2uiv(glGetUniformLocation(active_shader.gl_handle, name), count, value);

// void set_uniform(char* name, int32 count, float64* value) glUniform3dv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, float32* value) glUniform3fv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, int32* value)   glUniform3iv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, uint32* value)  glUniform3uiv(glGetUniformLocation(active_shader.gl_handle, name), count, value);

// void set_uniform(char* name, int32 count, float64* value) glUniform4dv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, float32* value) glUniform4fv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, int32* value)   glUniform4iv (glGetUniformLocation(active_shader.gl_handle, name), count, value);
// void set_uniform(char* name, int32 count, uint32* value)  glUniform4uiv(glGetUniformLocation(active_shader.gl_handle, name), count, value);



// type proc_glUniform1d                 = void(GLint /*location*/, GLdouble /*x*/);
// type proc_glUniform1dv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniform1f                 = void(GLint /*location*/, GLfloat /*v0*/);
// type proc_glUniform1fv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniform1i                 = void(GLint /*location*/, GLint /*v0*/);
// type proc_glUniform1iv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
// type proc_glUniform1ui                = void(GLint /*location*/, GLuint /*v0*/);
// type proc_glUniform1uiv               = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
// type proc_glUniform2d                 = void(GLint /*location*/, GLdouble /*x*/, GLdouble /*y*/);
// type proc_glUniform2dv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniform2f                 = void(GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/);
// type proc_glUniform2fv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniform2i                 = void(GLint /*location*/, GLint /*v0*/, GLint /*v1*/);
// type proc_glUniform2iv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
// type proc_glUniform2ui                = void(GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/);
// type proc_glUniform2uiv               = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
// type proc_glUniform3d                 = void(GLint /*location*/, GLdouble /*x*/, GLdouble /*y*/, GLdouble /*z*/);
// type proc_glUniform3dv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniform3f                 = void(GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/, GLfloat /*v2*/);
// type proc_glUniform3fv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniform3i                 = void(GLint /*location*/, GLint /*v0*/, GLint /*v1*/, GLint /*v2*/);
// type proc_glUniform3iv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
// type proc_glUniform3ui                = void(GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/, GLuint /*v2*/);
// type proc_glUniform3uiv               = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
// type proc_glUniform4d                 = void(GLint /*location*/, GLdouble /*x*/, GLdouble /*y*/, GLdouble /*z*/, GLdouble /*w*/);
// type proc_glUniform4dv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniform4f                 = void(GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/, GLfloat /*v2*/, GLfloat /*v3*/);
// type proc_glUniform4fv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniform4i                 = void(GLint /*location*/, GLint /*v0*/, GLint /*v1*/, GLint /*v2*/, GLint /*v3*/);
// type proc_glUniform4iv                = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
// type proc_glUniform4ui                = void(GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/, GLuint /*v2*/, GLuint /*v3*/);
// type proc_glUniform4uiv               = void(GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
// type proc_glUniformMatrix2dv          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniformMatrix2fv          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniformMatrix2x3dv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniformMatrix2x3fv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniformMatrix2x4dv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniformMatrix2x4fv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniformMatrix3dv          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniformMatrix3fv          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniformMatrix3x2dv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniformMatrix3x2fv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniformMatrix3x4dv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniformMatrix3x4fv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniformMatrix4dv          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniformMatrix4fv          = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniformMatrix4x2dv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniformMatrix4x2fv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glUniformMatrix4x3dv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glUniformMatrix4x3fv        = void(GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);

// type proc_glProgramUniform1d          = void(GLuint /*program*/, GLint /*location*/, GLdouble /*v0*/);
// type proc_glProgramUniform1dv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniform1f          = void(GLuint /*program*/, GLint /*location*/, GLfloat /*v0*/);
// type proc_glProgramUniform1fv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniform1i          = void(GLuint /*program*/, GLint /*location*/, GLint /*v0*/);
// type proc_glProgramUniform1iv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
// type proc_glProgramUniform1ui         = void(GLuint /*program*/, GLint /*location*/, GLuint /*v0*/);
// type proc_glProgramUniform1uiv        = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
// type proc_glProgramUniform2d          = void(GLuint /*program*/, GLint /*location*/, GLdouble /*v0*/, GLdouble /*v1*/);
// type proc_glProgramUniform2dv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniform2f          = void(GLuint /*program*/, GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/);
// type proc_glProgramUniform2fv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniform2i          = void(GLuint /*program*/, GLint /*location*/, GLint /*v0*/, GLint /*v1*/);
// type proc_glProgramUniform2iv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
// type proc_glProgramUniform2ui         = void(GLuint /*program*/, GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/);
// type proc_glProgramUniform2uiv        = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
// type proc_glProgramUniform3d          = void(GLuint /*program*/, GLint /*location*/, GLdouble /*v0*/, GLdouble /*v1*/, GLdouble /*v2*/);
// type proc_glProgramUniform3dv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniform3f          = void(GLuint /*program*/, GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/, GLfloat /*v2*/);
// type proc_glProgramUniform3fv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniform3i          = void(GLuint /*program*/, GLint /*location*/, GLint /*v0*/, GLint /*v1*/, GLint /*v2*/);
// type proc_glProgramUniform3iv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
// type proc_glProgramUniform3ui         = void(GLuint /*program*/, GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/, GLuint /*v2*/);
// type proc_glProgramUniform3uiv        = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
// type proc_glProgramUniform4d          = void(GLuint /*program*/, GLint /*location*/, GLdouble /*v0*/, GLdouble /*v1*/, GLdouble /*v2*/, GLdouble /*v3*/);
// type proc_glProgramUniform4dv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniform4f          = void(GLuint /*program*/, GLint /*location*/, GLfloat /*v0*/, GLfloat /*v1*/, GLfloat /*v2*/, GLfloat /*v3*/);
// type proc_glProgramUniform4fv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniform4i          = void(GLuint /*program*/, GLint /*location*/, GLint /*v0*/, GLint /*v1*/, GLint /*v2*/, GLint /*v3*/);
// type proc_glProgramUniform4iv         = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLint* /*value*/);
// type proc_glProgramUniform4ui         = void(GLuint /*program*/, GLint /*location*/, GLuint /*v0*/, GLuint /*v1*/, GLuint /*v2*/, GLuint /*v3*/);
// type proc_glProgramUniform4uiv        = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, /*const*/ GLuint* /*value*/);
// type proc_glProgramUniformMatrix2dv   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniformMatrix2fv   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniformMatrix2x3dv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniformMatrix2x3fv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniformMatrix2x4dv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniformMatrix2x4fv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniformMatrix3dv   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniformMatrix3fv   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniformMatrix3x2dv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniformMatrix3x2fv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniformMatrix3x4dv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniformMatrix3x4fv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniformMatrix4dv   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniformMatrix4fv   = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniformMatrix4x2dv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniformMatrix4x2fv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);
// type proc_glProgramUniformMatrix4x3dv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLdouble* /*value*/);
// type proc_glProgramUniformMatrix4x3fv = void(GLuint /*program*/, GLint /*location*/, GLsizei /*count*/, GLboolean /*transpose*/, /*const*/ GLfloat* /*value*/);