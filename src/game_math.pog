
struct Transform {
    vec3 position;
    vec3 scale;
    quat rotation;
}

mat4 to_matrix(with Transform t) {
    mat4 res = quat2matrix(t.rotation);

    // TODO: scale. I seem to recal I did this in stopgap

    res.row1 = res.row1 * t.scale.x;
    res.row2 = res.row2 * t.scale.y;
    res.row3 = res.row3 * t.scale.z;

    res.row4.x = t.position.x;
    res.row4.y = t.position.y;
    res.row4.z = t.position.z;

    return res;
}

mat4 to_inverse_matrix(with Transform t) {
    mat4 m = to_matrix(t);

    vec3 xaxis = xyz(m.row1) * t.scale.x;
    vec3 yaxis = xyz(m.row2) * t.scale.y;
    vec3 zaxis = xyz(m.row3) * t.scale.z;

    return {
        // the axises here are on the columns (insted of rows) because the transpose of an orthonormalized matrix is the same as its inverse
        xaxis.x, yaxis.x, zaxis.x, 0,
        xaxis.y, yaxis.y, zaxis.y, 0,
        xaxis.z, yaxis.z, zaxis.z, 0,
        -dot(xaxis, t.position),
        -dot(yaxis, t.position),
        -dot(zaxis, t.position), 1
    };
}

Transform transform_default() {
    return {
        position = {0,0,0},
        scale    = {1,1,1},
        rotation = {0,0,0,1}
    };
}

vec3 left   (with Transform tr) return xyz(quat2matrix(tr.rotation).row1);
vec3 up     (with Transform tr) return xyz(quat2matrix(tr.rotation).row2);
vec3 forward(with Transform tr) return xyz(quat2matrix(tr.rotation).row3);


void rotate(with Transform* tr, quat q) {
    tr.rotation = mul(tr.rotation, q);
    tr.rotation = normalize(tr.rotation);
}

void rotate(with Transform* tr, vec3 axis, float32 angle) {
    rotate(tr, axisangle2quat(axis, angle));
}

void translate(with Transform* tr, vec3 t) { translate(tr, t.x, t.y, t.z); }
void translate(with Transform* tr, float32 x, y, z) {
    tr.position.x += x;
    tr.position.y += y;
    tr.position.z += z;
}

void look_at(with Transform* tr, vec3 target) look_at(tr, target, vec3_unit_y);
void look_at(with Transform* tr, vec3 target, up) {
    vec3 forward = normalize(sub(target, tr.position));
    vec3 left    = normalize(cross(up, forward));
         up      = normalize(cross(forward, left));

    mat4 m = {
        make_vec(left,    0),
        make_vec(up,      0),
        make_vec(forward, 0),
        0,    0,    0,    1
    };

    tr.rotation = matrix2quat(m);
}

struct Transform2D {
    vec2 pos;
    float32 rot;
    float32 scale;
}

// mat3 to_matrix(Transform2D tr) {
//     float32 c = cosf(tr.rot);
//     float32 s = sinf(tr.rot);
//     mat3 m = {c, s, 0,
//              -s, c, 0,
//               0, 0, 1};

//     m.row1 = m.row1 * tr.scale.x;
//     m.row2 = m.row2 * tr.scale.y;
//     m.row3 = make_vec(tr.pos, 1);
//     return m;
// }

Transform2D lerp(float32 t, Transform2D a, Transform2D b) {
    Transform2D res = {};
    res.pos = lerp(t, a.pos, b.pos);
    res.rot = lerp(t, a.rot, b.rot); // TODO: this is definitely wrong!
    res.scale = lerp(t, a.scale, b.scale);
    return res;
}

vec2 right(with Transform2D t) { return make_vec(cosf(t.rot), sinf(t.rot)); }
vec2 up(with Transform2D t) { return make_vec(-sinf(t.rot), cosf(t.rot)); }

vec2 local2world(with Transform2D t, float32 x, y) { return local2world(t, make_vec(x, y)); }
vec2 local2world(with Transform2D t, vec2 p) {
    float32 c = cosf(t.rot);
    float32 s = sinf(t.rot);
    mat2 m = { c, s, -s, c };
    m.row1 = m.row1 * t.scale; // .x;
    m.row2 = m.row2 * t.scale; // .y;
    return m * p + t.pos;
}

vec2 world2local(with Transform2D t, vec2 p) { return world2local(t, p.x, p.y); }
vec2 world2local(with Transform2D t, float32 x, float32 y) {
    float32 c = cosf(t.rot) / t.scale;
    float32 s = sinf(t.rot) / t.scale;

    float32 px = x - t.pos.x;
    float32 py = y - t.pos.y;

    // mat2 m = { c, -s, s, c };

    vec2 res;
    res.x = c*px - s*py;
    res.y = s*px + c*py;
    return res;
}

float32 vec2_to_angle(vec2 v) {
    let a = angle(vec2_unit_y, v);
    if v.x < 0  a *= -1;
    return a;
}

void look_at(with Transform2D* tr, vec2 target) {
    vec2 diff = sub(target, tr.pos);
    tr.rot = vec2_to_angle(diff);
}

vec2 rotate_vec(vec2 dir, float32 angle) {
    float32 c = cosf(angle);
    float32 s = sinf(angle);

    vec2 res;
    res.x = c*dir.x + s*dir.y;
    res.y = -s*dir.x + c*dir.y;
    return res;
}

vec2 rot90deg(vec2 v) return make_vec(-v.y, v.x); // rotate 90 degrees to the left. (multiplication with imaginary unit)



float32 circle_dist(vec2 p0, float32 r0, vec2 p1, float32 r1) {
    return dist(p0, p1) - r0 - r1;
}


// ------------Camera-------------------------------------------------------------------

struct Camera {
    Transform transform;
    float32 fov;
    float32 near_plane, far_plane;

    mat4 view, projection;
}

Camera make_camera(float32 fov, float32 near, float32 far) {
    Camera cam = {};
    cam.transform = transform_default();
    cam.fov = fov;
    cam.near_plane = near;
    cam.far_plane = far;

    cam.view = mat4_identity();
    cam.projection = mat4_identity();

    return cam;
}

void update_matrices(with Camera* cam) {
    cam.projection = perspective(cam.fov, app.width_over_height, cam.near_plane, cam.far_plane);

    cam.view = to_matrix(cam.transform);
    let xaxis = neg(xyz(cam.view.row1));
    let yaxis = xyz(cam.view.row2);
    let zaxis = neg(xyz(cam.view.row3));

    cam.view = {
        // the axises here are on the columns (insted of rows) because the transpose of an orthonormalized matrix is the same as its inverse
        xaxis.x, yaxis.x, zaxis.x, 0,
        xaxis.y, yaxis.y, zaxis.y, 0,
        xaxis.z, yaxis.z, zaxis.z, 0,
        -dot(xaxis, cam.transform.position),
        -dot(yaxis, cam.transform.position),
        -dot(zaxis, cam.transform.position), 1
    };
}

void camera_fly_control(Camera* cam) {
    let m = to_matrix(cam.transform); // TODO: this is wrong cuz we dont want the scale part in there

    vec3 left = xyz(m.row1);
    vec3 forward = xyz(m.row3);

    if mouse(Right_Mouse) {
        rotate(*cam.transform, left, (-dmouse_y / 100.0) as float32);
        rotate(*cam.transform, vec3_unit_y, (dmouse_x / 100.0) as float32);
    }

    float32 speed = 1;
    if key(GLFW_KEY_LEFT_SHIFT) {
        speed *= 10;
    }

    translate(*cam.transform, mul(forward, Input.wasd.y * speed));
    translate(*cam.transform, mul(left,   -Input.wasd.x * speed));
}

void camera_orbit_control(Camera* cam, vec3 center) {
    float32 dt = deltatime();

    // x,y,z = yaw,pitch,zoom
    static vec3 target = {0, 0, 100};
    static vec3 current = {};

    current = exp_decay(current, target, 10, dt);

    target.z -= target.z * 0.15 * Input.mouse_scroll;
    target.z = max(target.z, 0.0001);


    float32 range = Half_Pi - 0.1;
    enable_cursor();
    if mouse(Right_Mouse) {
        // disable_cursor();
        target.x += Input.mouse_delta.x;
        target.y -= Input.mouse_delta.y;
        range = Half_Pi - 0.001;
    }

    target.y = clamp(target.y, -range, range);

    float32 yaw   = current.x;
    float32 pitch = current.y;
    float32 zoom  = current.z;

    let c = cosf(pitch);
    cam.transform.position = { cosf(yaw) * c, sinf(pitch), sinf(yaw) * c } * zoom + center;
    look_at(*cam.transform, center);
}

vec2 screen2ndc(float32 x, y) {
    return {
         (x / (app.window_width -1) - 0.5) * 2.0,
        -(y / (app.window_height-1) - 0.5) * 2.0
    };
}

// arcndc = Aspect Ratio Corrected Normalized Device Coordinates
vec2 screen2arcndc(float32 x, y) {
    return screen2ndc(x, y) * {app.width_over_height, 1};
}

vec3 camera_ray(Camera cam, vec2 arcndc) {
    float32 half_near_plane_height = cam.near_plane / tanf(Half_Pi - cam.fov / 2.0);
    float32 half_near_plane_width = half_near_plane_height;// * app.width_over_height;

    // NOTE: the first, second and third columns of the cameras view matrix is the side, up and forward vectors respectively. because the view matrix is the transpose of the cam model matrix
    let left    = xyz(col1(cam.view));
    let up      = xyz(col2(cam.view));
    let forward = xyz(col3(cam.view));

    vec3 ray = {};
    ray = ray + left * arcndc.x * half_near_plane_width;
    ray = ray + up   * arcndc.y * half_near_plane_height;
    ray = ray + forward * -cam.near_plane;
    return normalize(ray);
}

vec3 world2arcndc(Camera cam, vec3 pos) {
    let ndc = make_vec(pos, 1) * cam.view * cam.projection;
    ndc = ndc / ndc.w;
    ndc.x *= app.width_over_height;
    return xyz(ndc);
}

bool arcndc_rect_of(Camera cam, mat4 m, vec3 bb_min, bb_max, vec2* out_min, out_max) {
    vec3 bb_min_x = bb_min; bb_min_x.x = bb_max.x;
    vec3 bb_min_y = bb_min; bb_min_y.y = bb_max.y;
    vec3 bb_min_z = bb_min; bb_min_z.z = bb_max.z;
    vec3 bb_max_x = bb_max; bb_max_x.x = bb_min.x;
    vec3 bb_max_y = bb_max; bb_max_y.y = bb_min.y;
    vec3 bb_max_z = bb_max; bb_max_z.z = bb_min.z;

    vec3[] points = {
        bb_min,
        bb_max,
        bb_min_x,
        bb_min_y,
        bb_min_z,
        bb_max_x,
        bb_max_y,
        bb_max_z
    };

    vec3 arcndc_min = vec3_one*1000;
    vec3 arcndc_max = vec3_one*-1000;

    for 0 .. points.length {
        let wpos = xyz(make_vec(points[it], 1.0) * m);
        gizmo_point(wpos, Green, 1);
        let clip = world2arcndc(cam, wpos);
        if clip.z > 1 return false;

        arcndc_min = min(arcndc_min, clip);
        arcndc_max = max(arcndc_max, clip);
    }

    @out_min = xy(arcndc_min);
    @out_max = xy(arcndc_max);

    return true;
}
