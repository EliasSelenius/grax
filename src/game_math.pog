
struct Transform {
    vec3 position;
    vec3 scale;
    quat rotation;
}

mat4 to_matrix(with Transform t) {
    mat4 res = quat2matrix(t.rotation);

    // TODO: scale. I seem to recal I did this in stopgap

    res.row4.x = t.position.x;
    res.row4.y = t.position.y;
    res.row4.z = t.position.z;

    return res;
}

Transform transform_default() {
    return {
        position = {0,0,0},
        scale    = {1,1,1},
        rotation = {0,0,0,1}
    };
}

void rotate(with Transform* tr, quat q) {
    tr.rotation = mul(tr.rotation, q);
    tr.rotation = normalize(tr.rotation);
}

void rotate(with Transform* tr, vec3 axis, float32 angle) {
    rotate(tr, axisangle2quat(axis, angle));
}

void translate(with Transform* tr, vec3 t) {
    tr.position.x += t.x;
    tr.position.y += t.y;
    tr.position.z += t.z;
}

void look_at(with Transform* tr, vec3 target, vec3 up) {
    vec3 forward = normalize(sub(target, tr.position));
    vec3 left    = normalize(cross(up, forward));
         up      = normalize(cross(forward, left));

    
}

struct Transform2D {
    vec2 pos;
    float32 rot;
    float32 scale;
}

Transform2D lerp(float32 t, Transform2D a, Transform2D b) {
    Transform2D res = {};
    res.pos = lerp(t, a.pos, b.pos);
    res.rot = lerp(t, a.rot, b.rot); // TODO: this is definitely wrong!
    res.scale = lerp(t, a.scale, b.scale);
    return res;
}

vec2 right(with Transform2D t) { return make_vec(cosf(t.rot), sinf(t.rot)); }
vec2 up(with Transform2D t) { return make_vec(-sinf(t.rot), cosf(t.rot)); }

vec2 local2world(with Transform2D t, vec2 p) { return local2world(t, p.x, p.y); }
vec2 local2world(with Transform2D t, float32 x, float32 y) {
    float32 c = cosf(t.rot) * t.scale;
    float32 s = sinf(t.rot) * t.scale;

    vec2 res;
    res.x = c*x + s*y + t.pos.x;
    res.y = -s*x + c*y + t.pos.y;
    return res;
}

vec2 world2local(with Transform2D t, vec2 p) { return world2local(t, p.x, p.y); }
vec2 world2local(with Transform2D t, float32 x, float32 y) {
    float32 c = cosf(t.rot) / t.scale;
    float32 s = sinf(t.rot) / t.scale;

    float32 px = x - t.pos.x;
    float32 py = y - t.pos.y;

    vec2 res;
    res.x = c*px - s*py;
    res.y = c*py + s*px;
    return res;
}

float32 vec2_to_angle(vec2 v) {
    let a = angle(vec2_unit_y, v);
    if v.x < 0  a *= -1;
    return a;
}

void look_at(with Transform2D* tr, vec2 target) {
    vec2 diff = sub(target, tr.pos);
    tr.rot = vec2_to_angle(diff);
}

vec2 rotate_vec(vec2 dir, float32 angle) {
    float32 c = cosf(angle);
    float32 s = sinf(angle);

    vec2 res;
    res.x = c*dir.x + s*dir.y;
    res.y = -s*dir.x + c*dir.y;
    return res;
}


// ------------Camera-------------------------------------------------------------------

struct Camera {
    Transform transform;
    float32 fov;
    float32 near_plane, far_plane;

    mat4 view, projection;
}

Camera camera(float32 fov, float32 near, float32 far) {
    Camera cam = {};
    cam.transform = transform_default();
    cam.fov = fov;
    cam.near_plane = near;
    cam.far_plane = far;

    cam.view = mat4_identity();
    cam.projection = mat4_identity();

    return cam;
}

void update_matrices(with Camera* cam) {
    cam.projection = perspective(cam.fov, 1.0 / main_window_aspect, cam.near_plane, cam.far_plane);

    cam.view = to_matrix(cam.transform);
    let xaxis = neg(xyz(cam.view.row1));
    let yaxis = xyz(cam.view.row2);
    let zaxis = neg(xyz(cam.view.row3));

    cam.view = {
        // the axises here are on the columns (insted of rows) because the transpose of an orthonormalized matrix is the same as its inverse
        xaxis.x, yaxis.x, zaxis.x, 0,
        xaxis.y, yaxis.y, zaxis.y, 0,
        xaxis.z, yaxis.z, zaxis.z, 0,
        -dot(xaxis, cam.transform.position),
        -dot(yaxis, cam.transform.position),
        -dot(zaxis, cam.transform.position), 1
    };
}

void camera_fly_control(Camera* cam) {
    let m = to_matrix(cam.transform); // TODO: this is wrong cuz we dont want the scale part in there

    vec3 left = xyz(m.row1);
    vec3 forward = xyz(m.row3);

    if mouse(Right_Mouse) {
        rotate(*cam.transform, left, (-dmouse_y / 100.0) as float32);
        rotate(*cam.transform, vec3_unit_y, (dmouse_x / 100.0) as float32);
    }

    cam.transform.position = add(cam.transform.position, mul(forward, wasd.y / 10.0));
    cam.transform.position = add(cam.transform.position, mul(left, -wasd.x / 10.0));
}