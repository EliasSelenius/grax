
struct Batch_Of_Points {
    uint32 vao;
    uint32 vbo;

    GizmoPoint[..] points;
}

Batch_Of_Points create_batch_of_points() {
    Batch_Of_Points bop = {};

    bop.points = list_create(sizeof GizmoPoint);

    glGenVertexArrays(1, *bop.vao);
    glBindVertexArray(bop.vao);

    glGenBuffers(1, *bop.vbo);
    glBindBuffer(GL_ARRAY_BUFFER, bop.vbo);

    init_vertex_layout(sizeof GizmoPoint, gizmo_point_attribs);

    glBindVertexArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    return bop;
}

void dispatch(Batch_Of_Points* bop) {
    uint32 len = list_length(bop.points);
    update_buffer(bop.vbo, len * sizeof GizmoPoint, bop.points);

    glBindVertexArray(bop.vao);
    glDrawArrays(GL_POINTS, 0, len);
    glBindVertexArray(0);

    list_clear(bop.points);
}

void add_point(Batch_Of_Points* batch, GizmoPoint p) {
    list_add(*batch.points, *p);
}

Vertex_Attrib_Type[] gizmo_point_attribs = { .vec3, .color, .float32 };
struct GizmoPoint {
    vec3 pos;
    Color color;
    float32 size;
}

Color gizmo_current_color = White;

Shader gizmo_points_shader;

Batch_Of_Points gizmo_points_batch;

GizmoPoint[..] gizmo_line_segments;
uint32[..] gizmo_line_segments_indices;
DrawBuffers db_line_segments;

void gizmo_setup() {

    db_line_segments = create_draw_buffers(sizeof GizmoPoint, gizmo_point_attribs);

    gizmo_line_segments = list_create(sizeof GizmoPoint);
    gizmo_line_segments_indices = list_create(sizeof uint32);

    gizmo_points_batch = create_batch_of_points();

    glEnable(GL_PROGRAM_POINT_SIZE);
}

void gizmo_dispatch() {
    use(*gizmo_points_shader);

    disable_depth_test();
    // enable_depth_test();

    enable_alpha_blending();
    // disable_blending();

    dispatch(*gizmo_points_batch);


    update_indices(*db_line_segments, list_length(gizmo_line_segments_indices) as uint32, gizmo_line_segments_indices as uint32*);
    update_vertices(*db_line_segments, list_length(gizmo_line_segments) * sizeof GizmoPoint, gizmo_line_segments);

    draw_elements_lines(db_line_segments);
    list_clear(gizmo_line_segments);
    list_clear(gizmo_line_segments_indices);
}

void gizmo_line(vec3 a, b, Color color) {
    GizmoPoint gp = { pos = a, color = color };
    list_add(*gizmo_line_segments, *gp);
    gp.pos = b;
    list_add(*gizmo_line_segments, *gp);

    uint32 i = list_length(gizmo_line_segments);

    uint32 i0 = i - 1;
    uint32 i1 = i - 2;

    list_add(*gizmo_line_segments_indices, *i0);
    list_add(*gizmo_line_segments_indices, *i1);
}

void gizmo_point(vec3 pos) { gizmo_point(pos, gizmo_current_color); }
void gizmo_point(vec3 pos, float32 size) { gizmo_point(pos, gizmo_current_color, size); }
void gizmo_point(vec3 pos, Color color) { gizmo_point(pos, color, 0.1); }
void gizmo_point(vec3 pos, Color color, float32 size) {
    GizmoPoint gp = { pos = pos, color = color, size = size };
    add_point(*gizmo_points_batch, gp);
}

bool gizmo_transform(Transform* tr, Camera cam) {

    let ray = camera_ray(cam, Input.mouse_pos);
    mat4 m = to_matrix(@tr);

    gizmo_point(tr.position, White);
    if gizmo_transform_axis(tr, ray, xyz(m.row1), Red, cam) return true;
    if gizmo_transform_axis(tr, ray, xyz(m.row2), Green, cam) return true;
    if gizmo_transform_axis(tr, ray, xyz(m.row3), Blue, cam) return true;

    return false;
}

bool gizmo_transform_axis(Transform* tr, vec3 ray, vec3 axis, Color color, Camera cam) {

    float32 size = 0.1;
    if dot(ray, normalize(sub(add(tr.position, axis), cam.transform.position))) > 0.999 {
        size *= 2;
        if mouse(Left_Mouse) {
            tr.position = add(tr.position, axis);
            return true;
        }
    }

    for 1 .. 5 gizmo_point(add(tr.position, mul(axis, it / 5.0)), color, 0.05);
    gizmo_point(add(tr.position, axis), color, size);

    return false;
}

void gizmo_transform(Transform2D* tr) {

}

void gizmo_sphere(vec3 center, float32 radius, Color color) {
    // NOTE: we are just using gizmo_golden_sphere() for now, we might want to draw this gizmo differently
    uint32 n = (4*Pi*radius*radius) as uint32;
    gizmo_golden_sphere(n, center, radius, color);
}


void gizmo_golden_sphere(uint32 n, vec3 center, float32 radius, Color color) {
    float32 golden_ratio = (1.0 + sqrtf(5)) / 2.0;
    for 0 .. n {
        float32 phi = acosf(1 - 2 * (it + 0.5) / (n as float32));
        float32 angle = Tau * it / golden_ratio;
        vec3 pos = { cosf(angle) * sinf(phi), sinf(angle) * sinf(phi), cosf(phi) };
        gizmo_point(add(mul(pos, radius), center), color);
    }
}

void gizmo_capsule(vec3 a, b, up, float32 r, Color color) {
    gizmo_point(a, color);
    gizmo_point(b, color);

    vec3 ab = normalize(b - a);
    vec3 side = normalize(cross(ab, up));
         up   = normalize(cross(side, ab));

    mat3 m = { side, up, ab };

    {
        vec3 p1 = mul(make_vec(1, 0, 0), m) * r;
        vec3 p2 = mul(make_vec(-1, 0, 0), m) * r;
        vec3 p3 = mul(make_vec(0, 1, 0), m) * r;
        vec3 p4 = mul(make_vec(0, -1, 0), m) * r;

        gizmo_line(p1+a, p1+b, color);
        gizmo_line(p2+a, p2+b, color);
        gizmo_line(p3+a, p3+b, color);
        gizmo_line(p4+a, p4+b, color);
    }


    for 0 .. 16 {
        float32 angle1 = (it   as float32 / 16) * Tau;
        float32 angle2 = ((it+1) as float32 / 16) * Tau;

        float32 c1 = cosf(angle1/2);
        float32 s1 = sinf(angle1/2);
        float32 c2 = cosf(angle2/2);
        float32 s2 = sinf(angle2/2);

        vec3 p1 = mul(make_vec(cosf(angle1), sinf(angle1), 0), m) * r + a;
        vec3 p2 = mul(make_vec(cosf(angle2), sinf(angle2), 0), m) * r + a;
        gizmo_line(p1, p2, color);

        p1 = mul(make_vec(c1, 0, -s1), m) * r + a;
        p2 = mul(make_vec(c2, 0, -s2), m) * r + a;
        gizmo_line(p1, p2, color);

        p1 = mul(make_vec(0, c1, -s1), m) * r + a;
        p2 = mul(make_vec(0, c2, -s2), m) * r + a;
        gizmo_line(p1, p2, color);




        p1 = mul(make_vec(cosf(angle1), sinf(angle1), 0), m) * r + b;
        p2 = mul(make_vec(cosf(angle2), sinf(angle2), 0), m) * r + b;
        gizmo_line(p1, p2, color);

        p1 = mul(make_vec(c1, 0, s1), m) * r + b;
        p2 = mul(make_vec(c2, 0, s2), m) * r + b;
        gizmo_line(p1, p2, color);

        p1 = mul(make_vec(0, c1, s1), m) * r + b;
        p2 = mul(make_vec(0, c2, s2), m) * r + b;
        gizmo_line(p1, p2, color);
    }
}