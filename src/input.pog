
float64 mouse_x = 0;
float64 mouse_y = 0;

float64 pmouse_x = 0;
float64 pmouse_y = 0;

float64 dmouse_x = 0;
float64 dmouse_y = 0;

vec2 wasd;

// TODO: use bool
int32 key(char c) { return glfwGetKey(main_window, c as int32); }
int32 key(int32 c) { return glfwGetKey(main_window, c); }

// TODO: we need to keep track of the key state to implement this function
// int32 key_released(char c) { return glfwGetKey(main_window, c as int32) == GLFW_RELEASE; }
// int32 key_released(int32 c) { return glfwGetKey(main_window, c) == GLFW_RELEASE; }


const Left_Mouse = 0;
const Right_Mouse = 1;
int32 mouse(int32 btn) {
    return glfwGetMouseButton(main_window, btn);
}

void input_update() {
    pmouse_x = mouse_x;
    pmouse_y = mouse_y;
    glfwGetCursorPos(main_window, *mouse_x, *mouse_y);
    dmouse_x = mouse_x - pmouse_x;
    dmouse_y = mouse_y - pmouse_y;

    // TODO: normalize wasd
    wasd.x = 0;
    wasd.y = 0;
    if key('W') wasd.y += 1;
    if key('S') wasd.y -= 1;
    if key('A') wasd.x += 1;
    if key('D') wasd.x -= 1;
}

void enable_cursor() { glfwSetInputMode(main_window, GLFW_CURSOR, GLFW_CURSOR_NORMAL); }
void disable_cursor() { glfwSetInputMode(main_window, GLFW_CURSOR, GLFW_CURSOR_DISABLED); }