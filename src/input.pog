
struct InputState {
    vec2 mouse_pos;
    vec2 mouse_pos_prev;
    vec2 mouse_pos_delta;
    float32 mouse_scroll;

    vec2 wasd;
    vec2 unit_wasd;

    // supposed to be Key.Count
    bool[350] keyboard_changed;
}

InputState Input = {};

float64 mouse_x = 0;
float64 mouse_y = 0;

float64 pmouse_x = 0;
float64 pmouse_y = 0;

float64 dmouse_x = 0;
float64 dmouse_y = 0;

float64 mouse_scroll = 0;

bool key(char c) { return glfwGetKey(app.main_window, c as int32) as bool; }
bool key(int32 c) { return glfwGetKey(app.main_window, c) as bool; }

float32 input_axis(int32 a, b) {
    float32 res = 0;
    if key(a) res -= 1;
    if key(b) res += 1;
    return res;
}


bool key_down(Key key) return glfwGetKey(app.main_window, key as int32) == GLFW_PRESS;
bool key_pressed(Key key)  return  key_down(key) and Input.keyboard_changed[key];
bool key_released(Key key) return !key_down(key) and Input.keyboard_changed[key];

bool mouse_down_prev(MouseButton btn);
bool mouse_down(MouseButton btn) return glfwGetMouseButton(app.main_window, btn as int32) == GLFW_PRESS;
bool mouse_pressed(MouseButton btn)  return mouse_down(btn) and !mouse_down_prev(btn);
bool mouse_released(MouseButton btn) return !mouse_down(btn) and mouse_down_prev(btn);

enum MouseButton {
    Left = 0; Right = 1;
}

const Left_Mouse = 0;
const Right_Mouse = 1;
bool mouse(int32 btn) {
    return glfwGetMouseButton(app.main_window, btn) as bool;
}

bool mouse_pressed(int32 btn) {
    static bool prev_state = false;
    bool state = mouse(btn);
    bool res = !prev_state and state;
    prev_state = state;
    return res;
}

void input_update() {
    pmouse_x = mouse_x;
    pmouse_y = mouse_y;
    glfwGetCursorPos(app.main_window, *mouse_x, *mouse_y);
    dmouse_x = mouse_x - pmouse_x;
    dmouse_y = mouse_y - pmouse_y;

    Input.mouse_pos_prev = Input.mouse_pos;
    Input.mouse_pos = screen2ndc(mouse_x as float32, mouse_y as float32);
    Input.mouse_pos.x *= app.width_over_height;
    Input.mouse_pos_delta = Input.mouse_pos - Input.mouse_pos_prev;

    Input.wasd = {};
    if key('W') Input.wasd.y += 1;
    if key('S') Input.wasd.y -= 1;
    if key('A') Input.wasd.x -= 1;
    if key('D') Input.wasd.x += 1;
    Input.unit_wasd = normalize(Input.wasd);
}

void input_state_reset() {
    mouse_scroll = 0;
    Input.mouse_scroll = 0;


    for 0 .. 350 {
        Input.keyboard_changed[it] = false;
    }
}

void enable_cursor()  { glfwSetInputMode(app.main_window, GLFW_CURSOR, GLFW_CURSOR_NORMAL); }
void disable_cursor() { glfwSetInputMode(app.main_window, GLFW_CURSOR, GLFW_CURSOR_DISABLED); }

// adapted from glfw
enum Key {
    unknown = -1;
    space = 32;
    apostrophe = 39; /* ' */
    comma = 44; /* , */
    minus = 45; /* - */
    period = 46; /* . */
    slash = 47; /* / */

    _0 = 48;
    _1 = 49;
    _2 = 50;
    _3 = 51;
    _4 = 52;
    _5 = 53;
    _6 = 54;
    _7 = 55;
    _8 = 56;
    _9 = 57;

    semicolon = 59; /* ; */
    equal = 61; /* = */

    A = 65; B = 66; C = 67; D = 68; E = 69; F = 70; G = 71;
    H = 72; I = 73; J = 74; K = 75; L = 76; M = 77; N = 78;
    O = 79; P = 80; Q = 81; R = 82; S = 83; T = 84; U = 85;
    V = 86; W = 87; X = 88; Y = 89; Z = 90;

    left_bracket = 91; /* [ */
    backslash = 92; /* \ */
    right_bracket = 93; /* ] */
    grave_accent = 96; /* ` */
    world_1 = 161; /* non-US #1 */
    world_2 = 162; /* non-US #2 */
    escape = 256;
    enter = 257;
    tab = 258;
    backspace = 259;
    insert = 260;
    delete = 261;
    right = 262;
    left = 263;
    down = 264;
    up = 265;
    page_up = 266;
    page_down = 267;
    home = 268;
    end = 269;
    caps_lock = 280;
    scroll_lock = 281;
    num_lock = 282;
    print_screen = 283;
    pause = 284;

    F1 = 290; F2 = 291; F3 = 292; F4 = 293; F5 = 294; F6 = 295; F7 = 296;
    F8 = 297; F9 = 298; F10 = 299; F11 = 300; F12 = 301; F13 = 302; F14 = 303;
    F15 = 304; F16 = 305; F17 = 306; F18 = 307; F19 = 308; F20 = 309; F21 = 310;
    F22 = 311; F23 = 312; F24 = 313; F25 = 314;

    kp_0 = 320;
    kp_1 = 321;
    kp_2 = 322;
    kp_3 = 323;
    kp_4 = 324;
    kp_5 = 325;
    kp_6 = 326;
    kp_7 = 327;
    kp_8 = 328;
    kp_9 = 329;
    kp_decimal = 330;
    kp_divide = 331;
    kp_multiply = 332;
    kp_subtract = 333;
    kp_add = 334;
    kp_enter = 335;
    kp_equal = 336;

    left_shift = 340;  left_control = 341;  left_alt = 342;  left_super = 343;
    right_shift = 344; right_control = 345; right_alt = 346; right_super = 347;

    menu = 348;
}