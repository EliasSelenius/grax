
// TODO: this struct seems like a good idea
struct InputState {
    vec2 mouse_pos;
    vec2 wasd;
    vec2 unit_wasd;
    float32 mouse_scroll;
}

// InputState Input;

float64 mouse_x = 0;
float64 mouse_y = 0;

float64 pmouse_x = 0;
float64 pmouse_y = 0;

float64 dmouse_x = 0;
float64 dmouse_y = 0;

float64 mouse_scroll = 0;

vec2 wasd;

bool key(char c) { return glfwGetKey(app.main_window, c as int32) as bool; }
bool key(int32 c) { return glfwGetKey(app.main_window, c) as bool; }

float32 input_axis(int32 a, b) {
    float32 res = 0;
    if key(a) res -= 1;
    if key(b) res += 1;
    return res;
}


// TODO: we need to keep track of the key state to implement this function
// int32 key_released(char c) { return glfwGetKey(app.main_window, c as int32) == GLFW_RELEASE; }
// int32 key_released(int32 c) { return glfwGetKey(app.main_window, c) == GLFW_RELEASE; }


const Left_Mouse = 0;
const Right_Mouse = 1;
bool mouse(int32 btn) {
    return glfwGetMouseButton(app.main_window, btn) as bool;
}

bool mouse_pressed(int32 btn) {
    static bool prev_state = false;
    bool state = mouse(btn);
    bool res = !prev_state and state;
    prev_state = state;
    return res;
}

void input_update() {
    pmouse_x = mouse_x;
    pmouse_y = mouse_y;
    glfwGetCursorPos(app.main_window, *mouse_x, *mouse_y);
    dmouse_x = mouse_x - pmouse_x;
    dmouse_y = mouse_y - pmouse_y;

    wasd.x = 0;
    wasd.y = 0;
    if key('W') wasd.y += 1;
    if key('S') wasd.y -= 1;
    if key('A') wasd.x -= 1;
    if key('D') wasd.x += 1;
}

void input_state_reset() {
    mouse_scroll = 0;
}

void enable_cursor() { glfwSetInputMode(app.main_window, GLFW_CURSOR, GLFW_CURSOR_NORMAL); }
void disable_cursor() { glfwSetInputMode(app.main_window, GLFW_CURSOR, GLFW_CURSOR_DISABLED); }